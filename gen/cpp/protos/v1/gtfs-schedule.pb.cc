// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/v1/gtfs-schedule.proto

#include "protos/v1/gtfs-schedule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transit_scheduled {
PROTOBUF_CONSTEXPR Agency::Agency(
    ::_pbi::ConstantInitialized)
  : agency_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_timezone_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_lang_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_phone_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_fare_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AgencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgencyDefaultTypeInternal() {}
  union {
    Agency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgencyDefaultTypeInternal _Agency_default_instance_;
PROTOBUF_CONSTEXPR Stop::Stop(
    ::_pbi::ConstantInitialized)
  : stop_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tts_stop_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , zone_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_station_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_timezone_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , level_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , platform_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_lat_(0)
  , stop_lon_(0)
  , location_type_(0)

  , wheelchair_boarding_(0)
{}
struct StopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDefaultTypeInternal _Stop_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized)
  : route_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agency_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_short_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_long_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_color_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_text_color_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , network_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , route_type_(0)

  , route_sort_order_(0u)
  , continuous_pickup_(0)

  , continuous_drop_off_(0)
{}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
PROTOBUF_CONSTEXPR Trip::Trip(
    ::_pbi::ConstantInitialized)
  : route_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , service_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trip_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trip_headsign_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trip_short_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , block_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , shape_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_id_(0)

  , wheelchair_accessible_(0)

  , bikes_allowed_(0)
{}
struct TripDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripDefaultTypeInternal() {}
  union {
    Trip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripDefaultTypeInternal _Trip_default_instance_;
PROTOBUF_CONSTEXPR StopTime::StopTime(
    ::_pbi::ConstantInitialized)
  : trip_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , arrival_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , departure_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_headsign_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_sequence_(0u)
  , pickup_type_(0)

  , drop_off_type_(0)

  , continuous_pickup_(0)

  , continuous_drop_off_(0)

  , shape_dist_traveled_(0)
  , timepoint_(0u){}
struct StopTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopTimeDefaultTypeInternal() {}
  union {
    StopTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopTimeDefaultTypeInternal _StopTime_default_instance_;
}  // namespace transit_scheduled
static ::_pb::Metadata file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto = nullptr;

const uint32_t TableStruct_protos_2fv1_2fgtfs_2dschedule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_url_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_timezone_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_lang_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_phone_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_fare_url_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Agency, agency_email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_code_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, tts_stop_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_desc_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_lat_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_lon_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, zone_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_url_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, location_type_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, parent_station_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, stop_timezone_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, wheelchair_boarding_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, level_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Stop, platform_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, agency_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_short_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_long_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_desc_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_type_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_url_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_color_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_text_color_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, route_sort_order_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, continuous_pickup_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, continuous_drop_off_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Route, network_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, service_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, trip_headsign_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, trip_short_name_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, direction_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, block_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, shape_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, wheelchair_accessible_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::Trip, bikes_allowed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, arrival_time_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, departure_time_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, stop_headsign_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, pickup_type_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, drop_off_type_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, continuous_pickup_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, continuous_drop_off_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, shape_dist_traveled_),
  PROTOBUF_FIELD_OFFSET(::transit_scheduled::StopTime, timepoint_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transit_scheduled::Agency)},
  { 14, -1, -1, sizeof(::transit_scheduled::Stop)},
  { 35, -1, -1, sizeof(::transit_scheduled::Route)},
  { 54, -1, -1, sizeof(::transit_scheduled::Trip)},
  { 70, -1, -1, sizeof(::transit_scheduled::StopTime)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transit_scheduled::_Agency_default_instance_._instance,
  &::transit_scheduled::_Stop_default_instance_._instance,
  &::transit_scheduled::_Route_default_instance_._instance,
  &::transit_scheduled::_Trip_default_instance_._instance,
  &::transit_scheduled::_StopTime_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fv1_2fgtfs_2dschedule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035protos/v1/gtfs-schedule.proto\022\021transit"
  "_scheduled\"\267\001\n\006Agency\022\021\n\tagency_id\030\001 \001(\t"
  "\022\023\n\013agency_name\030\002 \001(\t\022\022\n\nagency_url\030\003 \001("
  "\t\022\027\n\017agency_timezone\030\004 \001(\t\022\023\n\013agency_lan"
  "g\030\005 \001(\t\022\024\n\014agency_phone\030\006 \001(\t\022\027\n\017agency_"
  "fare_url\030\007 \001(\t\022\024\n\014agency_email\030\010 \001(\t\"\261\005\n"
  "\004Stop\022\017\n\007stop_id\030\001 \001(\t\022\021\n\tstop_code\030\002 \001("
  "\t\022\021\n\tstop_name\030\003 \001(\t\022\025\n\rtts_stop_name\030\004 "
  "\001(\t\022\021\n\tstop_desc\030\005 \001(\t\022\020\n\010stop_lat\030\006 \001(\001"
  "\022\020\n\010stop_lon\030\007 \001(\001\022\017\n\007zone_id\030\010 \001(\t\022\020\n\010s"
  "top_url\030\t \001(\t\022;\n\rlocation_type\030\n \001(\0162$.t"
  "ransit_scheduled.Stop.LocationType\022\026\n\016pa"
  "rent_station\030\013 \001(\t\022\025\n\rstop_timezone\030\014 \001("
  "\t\022G\n\023wheelchair_boarding\030\r \001(\0162*.transit"
  "_scheduled.Stop.WheelchairBoarding\022\020\n\010le"
  "vel_id\030\016 \001(\t\022\025\n\rplatform_code\030\017 \001(\t\"\243\001\n\014"
  "LocationType\022\026\n\022LOCATION_TYPE_STOP\020\000\022\031\n\025"
  "LOCATION_TYPE_STATION\020\001\022\037\n\033LOCATION_TYPE"
  "_ENTRANCE_EXIT\020\002\022\036\n\032LOCATION_TYPE_GENERI"
  "C_NODE\020\003\022\037\n\033LOCATION_TYPE_BOARDING_AREA\020"
  "\004\"}\n\022WheelchairBoarding\022\037\n\033WHEELCHAIR_BO"
  "ARDING_NO_INFO\020\000\022 \n\034WHEELCHAIR_BOARDING_"
  "POSSIBLE\020\001\022$\n WHEELCHAIR_BOARDING_NOT_PO"
  "SSIBLE\020\002\"\312\005\n\005Route\022\020\n\010route_id\030\001 \001(\t\022\021\n\t"
  "agency_id\030\002 \001(\t\022\030\n\020route_short_name\030\003 \001("
  "\t\022\027\n\017route_long_name\030\004 \001(\t\022\022\n\nroute_desc"
  "\030\005 \001(\t\0226\n\nroute_type\030\006 \001(\0162\".transit_sch"
  "eduled.Route.RouteType\022\021\n\troute_url\030\007 \001("
  "\t\022\023\n\013route_color\030\010 \001(\t\022\030\n\020route_text_col"
  "or\030\t \001(\t\022\030\n\020route_sort_order\030\n \001(\r\022>\n\021co"
  "ntinuous_pickup\030\013 \001(\0162#.transit_schedule"
  "d.ContinuousPickup\022A\n\023continuous_drop_of"
  "f\030\014 \001(\0162$.transit_scheduled.ContinuousDr"
  "opOff\022\022\n\nnetwork_id\030\r \001(\t\"\251\002\n\tRouteType\022"
  "\'\n#ROUTE_TYPE_TRAM_STREETCAR_LIGHTRAIL\020\000"
  "\022\033\n\027ROUTE_TYPE_SUBWAY_METRO\020\001\022\023\n\017ROUTE_T"
  "YPE_RAIL\020\002\022\022\n\016ROUTE_TYPE_BUS\020\003\022\024\n\020ROUTE_"
  "TYPE_FERRY\020\004\022\031\n\025ROUTE_TYPE_CABLE_TRAM\020\005\022"
  ".\n*ROUTE_TYPE_AERIAL_LIFT_SUSPENDED_CABL"
  "E_CAR\020\006\022\030\n\024ROUTE_TYPE_FUNICULAR\020\007\022\031\n\025ROU"
  "TE_TYPE_TROLLEYBUS\020\013\022\027\n\023ROUTE_TYPE_MONOR"
  "AIL\020\014\"\233\005\n\004Trip\022\020\n\010route_id\030\001 \001(\t\022\022\n\nserv"
  "ice_id\030\002 \001(\t\022\017\n\007trip_id\030\003 \001(\t\022\025\n\rtrip_he"
  "adsign\030\004 \001(\t\022\027\n\017trip_short_name\030\005 \001(\t\0227\n"
  "\014direction_id\030\006 \001(\0162!.transit_scheduled."
  "Trip.Direction\022\020\n\010block_id\030\007 \001(\t\022\020\n\010shap"
  "e_id\030\010 \001(\t\022N\n\025wheelchair_accessible\030\t \001("
  "\0162/.transit_scheduled.Trip.WheelchairAcc"
  "essibility\022<\n\rbikes_allowed\030\n \001(\0162%.tran"
  "sit_scheduled.Trip.BikeAllowance\"@\n\tDire"
  "ction\022\033\n\027DIRECTION_ONE_DIRECTION\020\000\022\026\n\022DI"
  "RECTION_OPPOSITE\020\001\"\225\001\n\027WheelchairAccessi"
  "bility\022$\n WHEELCHAIR_ACCESSIBILITY_NO_IN"
  "FO\020\000\022\'\n#WHEELCHAIR_ACCESSIBILITY_ACCESSI"
  "BLE\020\001\022+\n\'WHEELCHAIR_ACCESSIBILITY_NOT_AC"
  "CESSIBLE\020\002\"g\n\rBikeAllowance\022\032\n\026BIKE_ALLO"
  "WANCE_NO_INFO\020\000\022\032\n\026BIKE_ALLOWANCE_ALLOWE"
  "D\020\001\022\036\n\032BIKE_ALLOWANCE_NOT_ALLOWED\020\002\"\310\006\n\010"
  "StopTime\022\017\n\007trip_id\030\001 \001(\t\022\024\n\014arrival_tim"
  "e\030\002 \001(\t\022\026\n\016departure_time\030\003 \001(\t\022\017\n\007stop_"
  "id\030\004 \001(\t\022\025\n\rstop_sequence\030\005 \001(\r\022\025\n\rstop_"
  "headsign\030\006 \001(\t\022;\n\013pickup_type\030\007 \001(\0162&.tr"
  "ansit_scheduled.StopTime.PickupType\022>\n\rd"
  "rop_off_type\030\010 \001(\0162\'.transit_scheduled.S"
  "topTime.DropOffType\022>\n\021continuous_pickup"
  "\030\t \001(\0162#.transit_scheduled.ContinuousPic"
  "kup\022A\n\023continuous_drop_off\030\n \001(\0162$.trans"
  "it_scheduled.ContinuousDropOff\022\033\n\023shape_"
  "dist_traveled\030\013 \001(\002\022\021\n\ttimepoint\030\014 \001(\r\"\241"
  "\001\n\nPickupType\022#\n\037PICKUP_TYPE_REGULARLY_S"
  "CHEDULED\020\000\022\036\n\032PICKUP_TYPE_NONE_AVAILABLE"
  "\020\001\022!\n\035PICKUP_TYPE_MUST_PHONE_AGENCY\020\002\022+\n"
  "\'PICKUP_TYPE_MUST_COORDINATE_WITH_DRIVER"
  "\020\003\"\252\001\n\013DropOffType\022%\n!DROP_OFF_TYPE_REGU"
  "LARLY_SCHEDULED\020\000\022 \n\034DROP_OFF_TYPE_NONE_"
  "AVAILABLE\020\001\022#\n\037DROP_OFF_TYPE_MUST_PHONE_"
  "AGENCY\020\002\022-\n)DROP_OFF_TYPE_MUST_COORDINAT"
  "E_WITH_DRIVER\020\003\"=\n\tTimePoint\022\032\n\026TIME_POI"
  "NT_APPROXIMATE\020\000\022\024\n\020TIME_POINT_EXACT\020\001*\274"
  "\001\n\020ContinuousPickup\022\036\n\032CONTINUOUS_PICKUP"
  "_STOPPING\020\000\022,\n(CONTINUOUS_PICKUP_NO_CONT"
  "INUOUS_STOPPING\020\001\022\'\n#CONTINUOUS_PICKUP_M"
  "UST_PHONE_AGENCY\020\002\0221\n-CONTINUOUS_PICKUP_"
  "MUST_COORDINATE_WITH_DRIVER\020\003*\320\001\n\021Contin"
  "uousDropOff\022+\n\'CONTINUOUS_DROP_OFF_CONTI"
  "NUOUS_STOPPING\020\000\022.\n*CONTINUOUS_DROP_OFF_"
  "NO_CONTINUOUS_STOPPING\020\001\022)\n%CONTINUOUS_D"
  "ROP_OFF_MUST_PHONE_AGENCY\020\002\0223\n/CONTINUOU"
  "S_DROP_OFF_MUST_COORDINATE_WITH_DRIVER\020\003"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto = {
    false, false, 3568, descriptor_table_protodef_protos_2fv1_2fgtfs_2dschedule_2eproto,
    "protos/v1/gtfs-schedule.proto",
    &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_protos_2fv1_2fgtfs_2dschedule_2eproto::offsets,
    file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto, file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto,
    file_level_service_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter() {
  return &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fv1_2fgtfs_2dschedule_2eproto(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
namespace transit_scheduled {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stop_LocationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[0];
}
bool Stop_LocationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Stop_LocationType Stop::LOCATION_TYPE_STOP;
constexpr Stop_LocationType Stop::LOCATION_TYPE_STATION;
constexpr Stop_LocationType Stop::LOCATION_TYPE_ENTRANCE_EXIT;
constexpr Stop_LocationType Stop::LOCATION_TYPE_GENERIC_NODE;
constexpr Stop_LocationType Stop::LOCATION_TYPE_BOARDING_AREA;
constexpr Stop_LocationType Stop::LocationType_MIN;
constexpr Stop_LocationType Stop::LocationType_MAX;
constexpr int Stop::LocationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stop_WheelchairBoarding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[1];
}
bool Stop_WheelchairBoarding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Stop_WheelchairBoarding Stop::WHEELCHAIR_BOARDING_NO_INFO;
constexpr Stop_WheelchairBoarding Stop::WHEELCHAIR_BOARDING_POSSIBLE;
constexpr Stop_WheelchairBoarding Stop::WHEELCHAIR_BOARDING_NOT_POSSIBLE;
constexpr Stop_WheelchairBoarding Stop::WheelchairBoarding_MIN;
constexpr Stop_WheelchairBoarding Stop::WheelchairBoarding_MAX;
constexpr int Stop::WheelchairBoarding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Route_RouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[2];
}
bool Route_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Route_RouteType Route::ROUTE_TYPE_TRAM_STREETCAR_LIGHTRAIL;
constexpr Route_RouteType Route::ROUTE_TYPE_SUBWAY_METRO;
constexpr Route_RouteType Route::ROUTE_TYPE_RAIL;
constexpr Route_RouteType Route::ROUTE_TYPE_BUS;
constexpr Route_RouteType Route::ROUTE_TYPE_FERRY;
constexpr Route_RouteType Route::ROUTE_TYPE_CABLE_TRAM;
constexpr Route_RouteType Route::ROUTE_TYPE_AERIAL_LIFT_SUSPENDED_CABLE_CAR;
constexpr Route_RouteType Route::ROUTE_TYPE_FUNICULAR;
constexpr Route_RouteType Route::ROUTE_TYPE_TROLLEYBUS;
constexpr Route_RouteType Route::ROUTE_TYPE_MONORAIL;
constexpr Route_RouteType Route::RouteType_MIN;
constexpr Route_RouteType Route::RouteType_MAX;
constexpr int Route::RouteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trip_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[3];
}
bool Trip_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Trip_Direction Trip::DIRECTION_ONE_DIRECTION;
constexpr Trip_Direction Trip::DIRECTION_OPPOSITE;
constexpr Trip_Direction Trip::Direction_MIN;
constexpr Trip_Direction Trip::Direction_MAX;
constexpr int Trip::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trip_WheelchairAccessibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[4];
}
bool Trip_WheelchairAccessibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Trip_WheelchairAccessibility Trip::WHEELCHAIR_ACCESSIBILITY_NO_INFO;
constexpr Trip_WheelchairAccessibility Trip::WHEELCHAIR_ACCESSIBILITY_ACCESSIBLE;
constexpr Trip_WheelchairAccessibility Trip::WHEELCHAIR_ACCESSIBILITY_NOT_ACCESSIBLE;
constexpr Trip_WheelchairAccessibility Trip::WheelchairAccessibility_MIN;
constexpr Trip_WheelchairAccessibility Trip::WheelchairAccessibility_MAX;
constexpr int Trip::WheelchairAccessibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trip_BikeAllowance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[5];
}
bool Trip_BikeAllowance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Trip_BikeAllowance Trip::BIKE_ALLOWANCE_NO_INFO;
constexpr Trip_BikeAllowance Trip::BIKE_ALLOWANCE_ALLOWED;
constexpr Trip_BikeAllowance Trip::BIKE_ALLOWANCE_NOT_ALLOWED;
constexpr Trip_BikeAllowance Trip::BikeAllowance_MIN;
constexpr Trip_BikeAllowance Trip::BikeAllowance_MAX;
constexpr int Trip::BikeAllowance_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopTime_PickupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[6];
}
bool StopTime_PickupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopTime_PickupType StopTime::PICKUP_TYPE_REGULARLY_SCHEDULED;
constexpr StopTime_PickupType StopTime::PICKUP_TYPE_NONE_AVAILABLE;
constexpr StopTime_PickupType StopTime::PICKUP_TYPE_MUST_PHONE_AGENCY;
constexpr StopTime_PickupType StopTime::PICKUP_TYPE_MUST_COORDINATE_WITH_DRIVER;
constexpr StopTime_PickupType StopTime::PickupType_MIN;
constexpr StopTime_PickupType StopTime::PickupType_MAX;
constexpr int StopTime::PickupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopTime_DropOffType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[7];
}
bool StopTime_DropOffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopTime_DropOffType StopTime::DROP_OFF_TYPE_REGULARLY_SCHEDULED;
constexpr StopTime_DropOffType StopTime::DROP_OFF_TYPE_NONE_AVAILABLE;
constexpr StopTime_DropOffType StopTime::DROP_OFF_TYPE_MUST_PHONE_AGENCY;
constexpr StopTime_DropOffType StopTime::DROP_OFF_TYPE_MUST_COORDINATE_WITH_DRIVER;
constexpr StopTime_DropOffType StopTime::DropOffType_MIN;
constexpr StopTime_DropOffType StopTime::DropOffType_MAX;
constexpr int StopTime::DropOffType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopTime_TimePoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[8];
}
bool StopTime_TimePoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopTime_TimePoint StopTime::TIME_POINT_APPROXIMATE;
constexpr StopTime_TimePoint StopTime::TIME_POINT_EXACT;
constexpr StopTime_TimePoint StopTime::TimePoint_MIN;
constexpr StopTime_TimePoint StopTime::TimePoint_MAX;
constexpr int StopTime::TimePoint_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinuousPickup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[9];
}
bool ContinuousPickup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinuousDropOff_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto);
  return file_level_enum_descriptors_protos_2fv1_2fgtfs_2dschedule_2eproto[10];
}
bool ContinuousDropOff_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Agency::_Internal {
 public:
};

Agency::Agency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transit_scheduled.Agency)
}
Agency::Agency(const Agency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agency_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_id().empty()) {
    agency_id_.Set(from._internal_agency_id(), 
      GetArenaForAllocation());
  }
  agency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_name().empty()) {
    agency_name_.Set(from._internal_agency_name(), 
      GetArenaForAllocation());
  }
  agency_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_url().empty()) {
    agency_url_.Set(from._internal_agency_url(), 
      GetArenaForAllocation());
  }
  agency_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_timezone().empty()) {
    agency_timezone_.Set(from._internal_agency_timezone(), 
      GetArenaForAllocation());
  }
  agency_lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_lang().empty()) {
    agency_lang_.Set(from._internal_agency_lang(), 
      GetArenaForAllocation());
  }
  agency_phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_phone().empty()) {
    agency_phone_.Set(from._internal_agency_phone(), 
      GetArenaForAllocation());
  }
  agency_fare_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_fare_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_fare_url().empty()) {
    agency_fare_url_.Set(from._internal_agency_fare_url(), 
      GetArenaForAllocation());
  }
  agency_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_email().empty()) {
    agency_email_.Set(from._internal_agency_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_scheduled.Agency)
}

inline void Agency::SharedCtor() {
agency_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_timezone_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_timezone_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_lang_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_lang_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_phone_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_phone_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_fare_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_fare_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Agency::~Agency() {
  // @@protoc_insertion_point(destructor:transit_scheduled.Agency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Agency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agency_id_.Destroy();
  agency_name_.Destroy();
  agency_url_.Destroy();
  agency_timezone_.Destroy();
  agency_lang_.Destroy();
  agency_phone_.Destroy();
  agency_fare_url_.Destroy();
  agency_email_.Destroy();
}

void Agency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Agency::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_scheduled.Agency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agency_id_.ClearToEmpty();
  agency_name_.ClearToEmpty();
  agency_url_.ClearToEmpty();
  agency_timezone_.ClearToEmpty();
  agency_lang_.ClearToEmpty();
  agency_phone_.ClearToEmpty();
  agency_fare_url_.ClearToEmpty();
  agency_email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agency_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agency_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_id"));
        } else
          goto handle_unusual;
        continue;
      // string agency_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_agency_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_name"));
        } else
          goto handle_unusual;
        continue;
      // string agency_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_agency_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_url"));
        } else
          goto handle_unusual;
        continue;
      // string agency_timezone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_agency_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_timezone"));
        } else
          goto handle_unusual;
        continue;
      // string agency_lang = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_agency_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_lang"));
        } else
          goto handle_unusual;
        continue;
      // string agency_phone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_agency_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_phone"));
        } else
          goto handle_unusual;
        continue;
      // string agency_fare_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_agency_fare_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_fare_url"));
        } else
          goto handle_unusual;
        continue;
      // string agency_email = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_agency_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Agency.agency_email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Agency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_scheduled.Agency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agency_id = 1;
  if (!this->_internal_agency_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_id().data(), static_cast<int>(this->_internal_agency_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agency_id(), target);
  }

  // string agency_name = 2;
  if (!this->_internal_agency_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_name().data(), static_cast<int>(this->_internal_agency_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agency_name(), target);
  }

  // string agency_url = 3;
  if (!this->_internal_agency_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_url().data(), static_cast<int>(this->_internal_agency_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_agency_url(), target);
  }

  // string agency_timezone = 4;
  if (!this->_internal_agency_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_timezone().data(), static_cast<int>(this->_internal_agency_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_timezone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_agency_timezone(), target);
  }

  // string agency_lang = 5;
  if (!this->_internal_agency_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_lang().data(), static_cast<int>(this->_internal_agency_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_lang");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_agency_lang(), target);
  }

  // string agency_phone = 6;
  if (!this->_internal_agency_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_phone().data(), static_cast<int>(this->_internal_agency_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_phone");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_agency_phone(), target);
  }

  // string agency_fare_url = 7;
  if (!this->_internal_agency_fare_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_fare_url().data(), static_cast<int>(this->_internal_agency_fare_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_fare_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_agency_fare_url(), target);
  }

  // string agency_email = 8;
  if (!this->_internal_agency_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_email().data(), static_cast<int>(this->_internal_agency_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Agency.agency_email");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_agency_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_scheduled.Agency)
  return target;
}

size_t Agency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_scheduled.Agency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agency_id = 1;
  if (!this->_internal_agency_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_id());
  }

  // string agency_name = 2;
  if (!this->_internal_agency_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_name());
  }

  // string agency_url = 3;
  if (!this->_internal_agency_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_url());
  }

  // string agency_timezone = 4;
  if (!this->_internal_agency_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_timezone());
  }

  // string agency_lang = 5;
  if (!this->_internal_agency_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_lang());
  }

  // string agency_phone = 6;
  if (!this->_internal_agency_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_phone());
  }

  // string agency_fare_url = 7;
  if (!this->_internal_agency_fare_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_fare_url());
  }

  // string agency_email = 8;
  if (!this->_internal_agency_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Agency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Agency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Agency::GetClassData() const { return &_class_data_; }

void Agency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Agency *>(to)->MergeFrom(
      static_cast<const Agency &>(from));
}


void Agency::MergeFrom(const Agency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_scheduled.Agency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agency_id().empty()) {
    _internal_set_agency_id(from._internal_agency_id());
  }
  if (!from._internal_agency_name().empty()) {
    _internal_set_agency_name(from._internal_agency_name());
  }
  if (!from._internal_agency_url().empty()) {
    _internal_set_agency_url(from._internal_agency_url());
  }
  if (!from._internal_agency_timezone().empty()) {
    _internal_set_agency_timezone(from._internal_agency_timezone());
  }
  if (!from._internal_agency_lang().empty()) {
    _internal_set_agency_lang(from._internal_agency_lang());
  }
  if (!from._internal_agency_phone().empty()) {
    _internal_set_agency_phone(from._internal_agency_phone());
  }
  if (!from._internal_agency_fare_url().empty()) {
    _internal_set_agency_fare_url(from._internal_agency_fare_url());
  }
  if (!from._internal_agency_email().empty()) {
    _internal_set_agency_email(from._internal_agency_email());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Agency::CopyFrom(const Agency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_scheduled.Agency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agency::IsInitialized() const {
  return true;
}

void Agency::InternalSwap(Agency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_id_, lhs_arena,
      &other->agency_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_name_, lhs_arena,
      &other->agency_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_url_, lhs_arena,
      &other->agency_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_timezone_, lhs_arena,
      &other->agency_timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_lang_, lhs_arena,
      &other->agency_lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_phone_, lhs_arena,
      &other->agency_phone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_fare_url_, lhs_arena,
      &other->agency_fare_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_email_, lhs_arena,
      &other->agency_email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Agency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter, &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once,
      file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[0]);
}

// ===================================================================

class Stop::_Internal {
 public:
};

Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transit_scheduled.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_id().empty()) {
    stop_id_.Set(from._internal_stop_id(), 
      GetArenaForAllocation());
  }
  stop_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_code().empty()) {
    stop_code_.Set(from._internal_stop_code(), 
      GetArenaForAllocation());
  }
  stop_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_name().empty()) {
    stop_name_.Set(from._internal_stop_name(), 
      GetArenaForAllocation());
  }
  tts_stop_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tts_stop_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tts_stop_name().empty()) {
    tts_stop_name_.Set(from._internal_tts_stop_name(), 
      GetArenaForAllocation());
  }
  stop_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_desc().empty()) {
    stop_desc_.Set(from._internal_stop_desc(), 
      GetArenaForAllocation());
  }
  zone_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    zone_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zone_id().empty()) {
    zone_id_.Set(from._internal_zone_id(), 
      GetArenaForAllocation());
  }
  stop_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_url().empty()) {
    stop_url_.Set(from._internal_stop_url(), 
      GetArenaForAllocation());
  }
  parent_station_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_station_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_station().empty()) {
    parent_station_.Set(from._internal_parent_station(), 
      GetArenaForAllocation());
  }
  stop_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_timezone().empty()) {
    stop_timezone_.Set(from._internal_stop_timezone(), 
      GetArenaForAllocation());
  }
  level_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    level_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level_id().empty()) {
    level_id_.Set(from._internal_level_id(), 
      GetArenaForAllocation());
  }
  platform_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform_code().empty()) {
    platform_code_.Set(from._internal_platform_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stop_lat_, &from.stop_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelchair_boarding_) -
    reinterpret_cast<char*>(&stop_lat_)) + sizeof(wheelchair_boarding_));
  // @@protoc_insertion_point(copy_constructor:transit_scheduled.Stop)
}

inline void Stop::SharedCtor() {
stop_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tts_stop_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tts_stop_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
zone_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  zone_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_station_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_station_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_timezone_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_timezone_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
level_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  level_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wheelchair_boarding_) -
    reinterpret_cast<char*>(&stop_lat_)) + sizeof(wheelchair_boarding_));
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:transit_scheduled.Stop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stop_id_.Destroy();
  stop_code_.Destroy();
  stop_name_.Destroy();
  tts_stop_name_.Destroy();
  stop_desc_.Destroy();
  zone_id_.Destroy();
  stop_url_.Destroy();
  parent_station_.Destroy();
  stop_timezone_.Destroy();
  level_id_.Destroy();
  platform_code_.Destroy();
}

void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_scheduled.Stop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_id_.ClearToEmpty();
  stop_code_.ClearToEmpty();
  stop_name_.ClearToEmpty();
  tts_stop_name_.ClearToEmpty();
  stop_desc_.ClearToEmpty();
  zone_id_.ClearToEmpty();
  stop_url_.ClearToEmpty();
  parent_station_.ClearToEmpty();
  stop_timezone_.ClearToEmpty();
  level_id_.ClearToEmpty();
  platform_code_.ClearToEmpty();
  ::memset(&stop_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheelchair_boarding_) -
      reinterpret_cast<char*>(&stop_lat_)) + sizeof(wheelchair_boarding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_id"));
        } else
          goto handle_unusual;
        continue;
      // string stop_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stop_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_code"));
        } else
          goto handle_unusual;
        continue;
      // string stop_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_name"));
        } else
          goto handle_unusual;
        continue;
      // string tts_stop_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tts_stop_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.tts_stop_name"));
        } else
          goto handle_unusual;
        continue;
      // string stop_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stop_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_desc"));
        } else
          goto handle_unusual;
        continue;
      // double stop_lat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          stop_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double stop_lon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          stop_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string zone_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_zone_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.zone_id"));
        } else
          goto handle_unusual;
        continue;
      // string stop_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_stop_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_url"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Stop.LocationType location_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_location_type(static_cast<::transit_scheduled::Stop_LocationType>(val));
        } else
          goto handle_unusual;
        continue;
      // string parent_station = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_parent_station();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.parent_station"));
        } else
          goto handle_unusual;
        continue;
      // string stop_timezone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_stop_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.stop_timezone"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Stop.WheelchairBoarding wheelchair_boarding = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheelchair_boarding(static_cast<::transit_scheduled::Stop_WheelchairBoarding>(val));
        } else
          goto handle_unusual;
        continue;
      // string level_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_level_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.level_id"));
        } else
          goto handle_unusual;
        continue;
      // string platform_code = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_platform_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Stop.platform_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_scheduled.Stop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_id = 1;
  if (!this->_internal_stop_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_id(), target);
  }

  // string stop_code = 2;
  if (!this->_internal_stop_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_code().data(), static_cast<int>(this->_internal_stop_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stop_code(), target);
  }

  // string stop_name = 3;
  if (!this->_internal_stop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_name().data(), static_cast<int>(this->_internal_stop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stop_name(), target);
  }

  // string tts_stop_name = 4;
  if (!this->_internal_tts_stop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tts_stop_name().data(), static_cast<int>(this->_internal_tts_stop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.tts_stop_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tts_stop_name(), target);
  }

  // string stop_desc = 5;
  if (!this->_internal_stop_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_desc().data(), static_cast<int>(this->_internal_stop_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stop_desc(), target);
  }

  // double stop_lat = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lat = this->_internal_stop_lat();
  uint64_t raw_stop_lat;
  memcpy(&raw_stop_lat, &tmp_stop_lat, sizeof(tmp_stop_lat));
  if (raw_stop_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_stop_lat(), target);
  }

  // double stop_lon = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lon = this->_internal_stop_lon();
  uint64_t raw_stop_lon;
  memcpy(&raw_stop_lon, &tmp_stop_lon, sizeof(tmp_stop_lon));
  if (raw_stop_lon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_stop_lon(), target);
  }

  // string zone_id = 8;
  if (!this->_internal_zone_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zone_id().data(), static_cast<int>(this->_internal_zone_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.zone_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_zone_id(), target);
  }

  // string stop_url = 9;
  if (!this->_internal_stop_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_url().data(), static_cast<int>(this->_internal_stop_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_stop_url(), target);
  }

  // .transit_scheduled.Stop.LocationType location_type = 10;
  if (this->_internal_location_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_location_type(), target);
  }

  // string parent_station = 11;
  if (!this->_internal_parent_station().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_station().data(), static_cast<int>(this->_internal_parent_station().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.parent_station");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_parent_station(), target);
  }

  // string stop_timezone = 12;
  if (!this->_internal_stop_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_timezone().data(), static_cast<int>(this->_internal_stop_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.stop_timezone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_stop_timezone(), target);
  }

  // .transit_scheduled.Stop.WheelchairBoarding wheelchair_boarding = 13;
  if (this->_internal_wheelchair_boarding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_wheelchair_boarding(), target);
  }

  // string level_id = 14;
  if (!this->_internal_level_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_id().data(), static_cast<int>(this->_internal_level_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.level_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_level_id(), target);
  }

  // string platform_code = 15;
  if (!this->_internal_platform_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_code().data(), static_cast<int>(this->_internal_platform_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Stop.platform_code");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_platform_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_scheduled.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_scheduled.Stop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_id = 1;
  if (!this->_internal_stop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_id());
  }

  // string stop_code = 2;
  if (!this->_internal_stop_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_code());
  }

  // string stop_name = 3;
  if (!this->_internal_stop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_name());
  }

  // string tts_stop_name = 4;
  if (!this->_internal_tts_stop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tts_stop_name());
  }

  // string stop_desc = 5;
  if (!this->_internal_stop_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_desc());
  }

  // string zone_id = 8;
  if (!this->_internal_zone_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zone_id());
  }

  // string stop_url = 9;
  if (!this->_internal_stop_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_url());
  }

  // string parent_station = 11;
  if (!this->_internal_parent_station().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_station());
  }

  // string stop_timezone = 12;
  if (!this->_internal_stop_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_timezone());
  }

  // string level_id = 14;
  if (!this->_internal_level_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_id());
  }

  // string platform_code = 15;
  if (!this->_internal_platform_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_code());
  }

  // double stop_lat = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lat = this->_internal_stop_lat();
  uint64_t raw_stop_lat;
  memcpy(&raw_stop_lat, &tmp_stop_lat, sizeof(tmp_stop_lat));
  if (raw_stop_lat != 0) {
    total_size += 1 + 8;
  }

  // double stop_lon = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lon = this->_internal_stop_lon();
  uint64_t raw_stop_lon;
  memcpy(&raw_stop_lon, &tmp_stop_lon, sizeof(tmp_stop_lon));
  if (raw_stop_lon != 0) {
    total_size += 1 + 8;
  }

  // .transit_scheduled.Stop.LocationType location_type = 10;
  if (this->_internal_location_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_location_type());
  }

  // .transit_scheduled.Stop.WheelchairBoarding wheelchair_boarding = 13;
  if (this->_internal_wheelchair_boarding() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wheelchair_boarding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stop::GetClassData() const { return &_class_data_; }

void Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stop *>(to)->MergeFrom(
      static_cast<const Stop &>(from));
}


void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_scheduled.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_id().empty()) {
    _internal_set_stop_id(from._internal_stop_id());
  }
  if (!from._internal_stop_code().empty()) {
    _internal_set_stop_code(from._internal_stop_code());
  }
  if (!from._internal_stop_name().empty()) {
    _internal_set_stop_name(from._internal_stop_name());
  }
  if (!from._internal_tts_stop_name().empty()) {
    _internal_set_tts_stop_name(from._internal_tts_stop_name());
  }
  if (!from._internal_stop_desc().empty()) {
    _internal_set_stop_desc(from._internal_stop_desc());
  }
  if (!from._internal_zone_id().empty()) {
    _internal_set_zone_id(from._internal_zone_id());
  }
  if (!from._internal_stop_url().empty()) {
    _internal_set_stop_url(from._internal_stop_url());
  }
  if (!from._internal_parent_station().empty()) {
    _internal_set_parent_station(from._internal_parent_station());
  }
  if (!from._internal_stop_timezone().empty()) {
    _internal_set_stop_timezone(from._internal_stop_timezone());
  }
  if (!from._internal_level_id().empty()) {
    _internal_set_level_id(from._internal_level_id());
  }
  if (!from._internal_platform_code().empty()) {
    _internal_set_platform_code(from._internal_platform_code());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lat = from._internal_stop_lat();
  uint64_t raw_stop_lat;
  memcpy(&raw_stop_lat, &tmp_stop_lat, sizeof(tmp_stop_lat));
  if (raw_stop_lat != 0) {
    _internal_set_stop_lat(from._internal_stop_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_lon = from._internal_stop_lon();
  uint64_t raw_stop_lon;
  memcpy(&raw_stop_lon, &tmp_stop_lon, sizeof(tmp_stop_lon));
  if (raw_stop_lon != 0) {
    _internal_set_stop_lon(from._internal_stop_lon());
  }
  if (from._internal_location_type() != 0) {
    _internal_set_location_type(from._internal_location_type());
  }
  if (from._internal_wheelchair_boarding() != 0) {
    _internal_set_wheelchair_boarding(from._internal_wheelchair_boarding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_scheduled.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_id_, lhs_arena,
      &other->stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_code_, lhs_arena,
      &other->stop_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_name_, lhs_arena,
      &other->stop_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tts_stop_name_, lhs_arena,
      &other->tts_stop_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_desc_, lhs_arena,
      &other->stop_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &zone_id_, lhs_arena,
      &other->zone_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_url_, lhs_arena,
      &other->stop_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_station_, lhs_arena,
      &other->parent_station_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_timezone_, lhs_arena,
      &other->stop_timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &level_id_, lhs_arena,
      &other->level_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &platform_code_, lhs_arena,
      &other->platform_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stop, wheelchair_boarding_)
      + sizeof(Stop::wheelchair_boarding_)
      - PROTOBUF_FIELD_OFFSET(Stop, stop_lat_)>(
          reinterpret_cast<char*>(&stop_lat_),
          reinterpret_cast<char*>(&other->stop_lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter, &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once,
      file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[1]);
}

// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transit_scheduled.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    route_id_.Set(from._internal_route_id(), 
      GetArenaForAllocation());
  }
  agency_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_id().empty()) {
    agency_id_.Set(from._internal_agency_id(), 
      GetArenaForAllocation());
  }
  route_short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_short_name().empty()) {
    route_short_name_.Set(from._internal_route_short_name(), 
      GetArenaForAllocation());
  }
  route_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_long_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_long_name().empty()) {
    route_long_name_.Set(from._internal_route_long_name(), 
      GetArenaForAllocation());
  }
  route_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_desc().empty()) {
    route_desc_.Set(from._internal_route_desc(), 
      GetArenaForAllocation());
  }
  route_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_url().empty()) {
    route_url_.Set(from._internal_route_url(), 
      GetArenaForAllocation());
  }
  route_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_color().empty()) {
    route_color_.Set(from._internal_route_color(), 
      GetArenaForAllocation());
  }
  route_text_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_text_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_text_color().empty()) {
    route_text_color_.Set(from._internal_route_text_color(), 
      GetArenaForAllocation());
  }
  network_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    network_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network_id().empty()) {
    network_id_.Set(from._internal_network_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&route_type_, &from.route_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuous_drop_off_) -
    reinterpret_cast<char*>(&route_type_)) + sizeof(continuous_drop_off_));
  // @@protoc_insertion_point(copy_constructor:transit_scheduled.Route)
}

inline void Route::SharedCtor() {
route_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agency_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_short_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_short_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_long_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_long_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_color_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_color_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_text_color_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_text_color_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
network_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  network_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&route_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&continuous_drop_off_) -
    reinterpret_cast<char*>(&route_type_)) + sizeof(continuous_drop_off_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:transit_scheduled.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  route_id_.Destroy();
  agency_id_.Destroy();
  route_short_name_.Destroy();
  route_long_name_.Destroy();
  route_desc_.Destroy();
  route_url_.Destroy();
  route_color_.Destroy();
  route_text_color_.Destroy();
  network_id_.Destroy();
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_scheduled.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_id_.ClearToEmpty();
  agency_id_.ClearToEmpty();
  route_short_name_.ClearToEmpty();
  route_long_name_.ClearToEmpty();
  route_desc_.ClearToEmpty();
  route_url_.ClearToEmpty();
  route_color_.ClearToEmpty();
  route_text_color_.ClearToEmpty();
  network_id_.ClearToEmpty();
  ::memset(&route_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuous_drop_off_) -
      reinterpret_cast<char*>(&route_type_)) + sizeof(continuous_drop_off_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_id"));
        } else
          goto handle_unusual;
        continue;
      // string agency_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_agency_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.agency_id"));
        } else
          goto handle_unusual;
        continue;
      // string route_short_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_route_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_short_name"));
        } else
          goto handle_unusual;
        continue;
      // string route_long_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_route_long_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_long_name"));
        } else
          goto handle_unusual;
        continue;
      // string route_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_route_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_desc"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Route.RouteType route_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_type(static_cast<::transit_scheduled::Route_RouteType>(val));
        } else
          goto handle_unusual;
        continue;
      // string route_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_route_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_url"));
        } else
          goto handle_unusual;
        continue;
      // string route_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_route_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_color"));
        } else
          goto handle_unusual;
        continue;
      // string route_text_color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_route_text_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.route_text_color"));
        } else
          goto handle_unusual;
        continue;
      // uint32 route_sort_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          route_sort_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.ContinuousPickup continuous_pickup = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_pickup(static_cast<::transit_scheduled::ContinuousPickup>(val));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.ContinuousDropOff continuous_drop_off = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_drop_off(static_cast<::transit_scheduled::ContinuousDropOff>(val));
        } else
          goto handle_unusual;
        continue;
      // string network_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_network_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Route.network_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_scheduled.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_id(), target);
  }

  // string agency_id = 2;
  if (!this->_internal_agency_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_id().data(), static_cast<int>(this->_internal_agency_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.agency_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agency_id(), target);
  }

  // string route_short_name = 3;
  if (!this->_internal_route_short_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_short_name().data(), static_cast<int>(this->_internal_route_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_short_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_route_short_name(), target);
  }

  // string route_long_name = 4;
  if (!this->_internal_route_long_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_long_name().data(), static_cast<int>(this->_internal_route_long_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_long_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_route_long_name(), target);
  }

  // string route_desc = 5;
  if (!this->_internal_route_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_desc().data(), static_cast<int>(this->_internal_route_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_route_desc(), target);
  }

  // .transit_scheduled.Route.RouteType route_type = 6;
  if (this->_internal_route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_route_type(), target);
  }

  // string route_url = 7;
  if (!this->_internal_route_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_url().data(), static_cast<int>(this->_internal_route_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_route_url(), target);
  }

  // string route_color = 8;
  if (!this->_internal_route_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_color().data(), static_cast<int>(this->_internal_route_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_color");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_route_color(), target);
  }

  // string route_text_color = 9;
  if (!this->_internal_route_text_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_text_color().data(), static_cast<int>(this->_internal_route_text_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.route_text_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_route_text_color(), target);
  }

  // uint32 route_sort_order = 10;
  if (this->_internal_route_sort_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_route_sort_order(), target);
  }

  // .transit_scheduled.ContinuousPickup continuous_pickup = 11;
  if (this->_internal_continuous_pickup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_continuous_pickup(), target);
  }

  // .transit_scheduled.ContinuousDropOff continuous_drop_off = 12;
  if (this->_internal_continuous_drop_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_continuous_drop_off(), target);
  }

  // string network_id = 13;
  if (!this->_internal_network_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_id().data(), static_cast<int>(this->_internal_network_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Route.network_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_network_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_scheduled.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_scheduled.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // string agency_id = 2;
  if (!this->_internal_agency_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_id());
  }

  // string route_short_name = 3;
  if (!this->_internal_route_short_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_short_name());
  }

  // string route_long_name = 4;
  if (!this->_internal_route_long_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_long_name());
  }

  // string route_desc = 5;
  if (!this->_internal_route_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_desc());
  }

  // string route_url = 7;
  if (!this->_internal_route_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_url());
  }

  // string route_color = 8;
  if (!this->_internal_route_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_color());
  }

  // string route_text_color = 9;
  if (!this->_internal_route_text_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_text_color());
  }

  // string network_id = 13;
  if (!this->_internal_network_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_id());
  }

  // .transit_scheduled.Route.RouteType route_type = 6;
  if (this->_internal_route_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_route_type());
  }

  // uint32 route_sort_order = 10;
  if (this->_internal_route_sort_order() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_route_sort_order());
  }

  // .transit_scheduled.ContinuousPickup continuous_pickup = 11;
  if (this->_internal_continuous_pickup() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_continuous_pickup());
  }

  // .transit_scheduled.ContinuousDropOff continuous_drop_off = 12;
  if (this->_internal_continuous_drop_off() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_continuous_drop_off());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }

void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Route *>(to)->MergeFrom(
      static_cast<const Route &>(from));
}


void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_scheduled.Route)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_id().empty()) {
    _internal_set_route_id(from._internal_route_id());
  }
  if (!from._internal_agency_id().empty()) {
    _internal_set_agency_id(from._internal_agency_id());
  }
  if (!from._internal_route_short_name().empty()) {
    _internal_set_route_short_name(from._internal_route_short_name());
  }
  if (!from._internal_route_long_name().empty()) {
    _internal_set_route_long_name(from._internal_route_long_name());
  }
  if (!from._internal_route_desc().empty()) {
    _internal_set_route_desc(from._internal_route_desc());
  }
  if (!from._internal_route_url().empty()) {
    _internal_set_route_url(from._internal_route_url());
  }
  if (!from._internal_route_color().empty()) {
    _internal_set_route_color(from._internal_route_color());
  }
  if (!from._internal_route_text_color().empty()) {
    _internal_set_route_text_color(from._internal_route_text_color());
  }
  if (!from._internal_network_id().empty()) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from._internal_route_type() != 0) {
    _internal_set_route_type(from._internal_route_type());
  }
  if (from._internal_route_sort_order() != 0) {
    _internal_set_route_sort_order(from._internal_route_sort_order());
  }
  if (from._internal_continuous_pickup() != 0) {
    _internal_set_continuous_pickup(from._internal_continuous_pickup());
  }
  if (from._internal_continuous_drop_off() != 0) {
    _internal_set_continuous_drop_off(from._internal_continuous_drop_off());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_scheduled.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_id_, lhs_arena,
      &other->route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agency_id_, lhs_arena,
      &other->agency_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_short_name_, lhs_arena,
      &other->route_short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_long_name_, lhs_arena,
      &other->route_long_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_desc_, lhs_arena,
      &other->route_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_url_, lhs_arena,
      &other->route_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_color_, lhs_arena,
      &other->route_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_text_color_, lhs_arena,
      &other->route_text_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &network_id_, lhs_arena,
      &other->network_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Route, continuous_drop_off_)
      + sizeof(Route::continuous_drop_off_)
      - PROTOBUF_FIELD_OFFSET(Route, route_type_)>(
          reinterpret_cast<char*>(&route_type_),
          reinterpret_cast<char*>(&other->route_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter, &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once,
      file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[2]);
}

// ===================================================================

class Trip::_Internal {
 public:
};

Trip::Trip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transit_scheduled.Trip)
}
Trip::Trip(const Trip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    route_id_.Set(from._internal_route_id(), 
      GetArenaForAllocation());
  }
  service_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_id().empty()) {
    service_id_.Set(from._internal_service_id(), 
      GetArenaForAllocation());
  }
  trip_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trip_id().empty()) {
    trip_id_.Set(from._internal_trip_id(), 
      GetArenaForAllocation());
  }
  trip_headsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_headsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trip_headsign().empty()) {
    trip_headsign_.Set(from._internal_trip_headsign(), 
      GetArenaForAllocation());
  }
  trip_short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trip_short_name().empty()) {
    trip_short_name_.Set(from._internal_trip_short_name(), 
      GetArenaForAllocation());
  }
  block_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_id().empty()) {
    block_id_.Set(from._internal_block_id(), 
      GetArenaForAllocation());
  }
  shape_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shape_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shape_id().empty()) {
    shape_id_.Set(from._internal_shape_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&direction_id_, &from.direction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bikes_allowed_) -
    reinterpret_cast<char*>(&direction_id_)) + sizeof(bikes_allowed_));
  // @@protoc_insertion_point(copy_constructor:transit_scheduled.Trip)
}

inline void Trip::SharedCtor() {
route_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
service_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trip_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trip_headsign_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_headsign_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trip_short_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_short_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shape_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shape_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bikes_allowed_) -
    reinterpret_cast<char*>(&direction_id_)) + sizeof(bikes_allowed_));
}

Trip::~Trip() {
  // @@protoc_insertion_point(destructor:transit_scheduled.Trip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  route_id_.Destroy();
  service_id_.Destroy();
  trip_id_.Destroy();
  trip_headsign_.Destroy();
  trip_short_name_.Destroy();
  block_id_.Destroy();
  shape_id_.Destroy();
}

void Trip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trip::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_scheduled.Trip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_id_.ClearToEmpty();
  service_id_.ClearToEmpty();
  trip_id_.ClearToEmpty();
  trip_headsign_.ClearToEmpty();
  trip_short_name_.ClearToEmpty();
  block_id_.ClearToEmpty();
  shape_id_.ClearToEmpty();
  ::memset(&direction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bikes_allowed_) -
      reinterpret_cast<char*>(&direction_id_)) + sizeof(bikes_allowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.route_id"));
        } else
          goto handle_unusual;
        continue;
      // string service_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.service_id"));
        } else
          goto handle_unusual;
        continue;
      // string trip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_trip_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.trip_id"));
        } else
          goto handle_unusual;
        continue;
      // string trip_headsign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trip_headsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.trip_headsign"));
        } else
          goto handle_unusual;
        continue;
      // string trip_short_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trip_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.trip_short_name"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Trip.Direction direction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction_id(static_cast<::transit_scheduled::Trip_Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // string block_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_block_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.block_id"));
        } else
          goto handle_unusual;
        continue;
      // string shape_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_shape_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.Trip.shape_id"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheelchair_accessible(static_cast<::transit_scheduled::Trip_WheelchairAccessibility>(val));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bikes_allowed(static_cast<::transit_scheduled::Trip_BikeAllowance>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_scheduled.Trip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.route_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_id(), target);
  }

  // string service_id = 2;
  if (!this->_internal_service_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_id().data(), static_cast<int>(this->_internal_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.service_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_id(), target);
  }

  // string trip_id = 3;
  if (!this->_internal_trip_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trip_id().data(), static_cast<int>(this->_internal_trip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.trip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trip_id(), target);
  }

  // string trip_headsign = 4;
  if (!this->_internal_trip_headsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trip_headsign().data(), static_cast<int>(this->_internal_trip_headsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.trip_headsign");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trip_headsign(), target);
  }

  // string trip_short_name = 5;
  if (!this->_internal_trip_short_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trip_short_name().data(), static_cast<int>(this->_internal_trip_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.trip_short_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trip_short_name(), target);
  }

  // .transit_scheduled.Trip.Direction direction_id = 6;
  if (this->_internal_direction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_direction_id(), target);
  }

  // string block_id = 7;
  if (!this->_internal_block_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_id().data(), static_cast<int>(this->_internal_block_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.block_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_block_id(), target);
  }

  // string shape_id = 8;
  if (!this->_internal_shape_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape_id().data(), static_cast<int>(this->_internal_shape_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.Trip.shape_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_shape_id(), target);
  }

  // .transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;
  if (this->_internal_wheelchair_accessible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_wheelchair_accessible(), target);
  }

  // .transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;
  if (this->_internal_bikes_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_bikes_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_scheduled.Trip)
  return target;
}

size_t Trip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_scheduled.Trip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // string service_id = 2;
  if (!this->_internal_service_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_id());
  }

  // string trip_id = 3;
  if (!this->_internal_trip_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trip_id());
  }

  // string trip_headsign = 4;
  if (!this->_internal_trip_headsign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trip_headsign());
  }

  // string trip_short_name = 5;
  if (!this->_internal_trip_short_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trip_short_name());
  }

  // string block_id = 7;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_id());
  }

  // string shape_id = 8;
  if (!this->_internal_shape_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape_id());
  }

  // .transit_scheduled.Trip.Direction direction_id = 6;
  if (this->_internal_direction_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction_id());
  }

  // .transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;
  if (this->_internal_wheelchair_accessible() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wheelchair_accessible());
  }

  // .transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;
  if (this->_internal_bikes_allowed() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bikes_allowed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trip::GetClassData() const { return &_class_data_; }

void Trip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trip *>(to)->MergeFrom(
      static_cast<const Trip &>(from));
}


void Trip::MergeFrom(const Trip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_scheduled.Trip)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_id().empty()) {
    _internal_set_route_id(from._internal_route_id());
  }
  if (!from._internal_service_id().empty()) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (!from._internal_trip_id().empty()) {
    _internal_set_trip_id(from._internal_trip_id());
  }
  if (!from._internal_trip_headsign().empty()) {
    _internal_set_trip_headsign(from._internal_trip_headsign());
  }
  if (!from._internal_trip_short_name().empty()) {
    _internal_set_trip_short_name(from._internal_trip_short_name());
  }
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_shape_id().empty()) {
    _internal_set_shape_id(from._internal_shape_id());
  }
  if (from._internal_direction_id() != 0) {
    _internal_set_direction_id(from._internal_direction_id());
  }
  if (from._internal_wheelchair_accessible() != 0) {
    _internal_set_wheelchair_accessible(from._internal_wheelchair_accessible());
  }
  if (from._internal_bikes_allowed() != 0) {
    _internal_set_bikes_allowed(from._internal_bikes_allowed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trip::CopyFrom(const Trip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_scheduled.Trip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trip::IsInitialized() const {
  return true;
}

void Trip::InternalSwap(Trip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &route_id_, lhs_arena,
      &other->route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_id_, lhs_arena,
      &other->service_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trip_id_, lhs_arena,
      &other->trip_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trip_headsign_, lhs_arena,
      &other->trip_headsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trip_short_name_, lhs_arena,
      &other->trip_short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &shape_id_, lhs_arena,
      &other->shape_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trip, bikes_allowed_)
      + sizeof(Trip::bikes_allowed_)
      - PROTOBUF_FIELD_OFFSET(Trip, direction_id_)>(
          reinterpret_cast<char*>(&direction_id_),
          reinterpret_cast<char*>(&other->direction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter, &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once,
      file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[3]);
}

// ===================================================================

class StopTime::_Internal {
 public:
};

StopTime::StopTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transit_scheduled.StopTime)
}
StopTime::StopTime(const StopTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trip_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trip_id().empty()) {
    trip_id_.Set(from._internal_trip_id(), 
      GetArenaForAllocation());
  }
  arrival_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    arrival_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arrival_time().empty()) {
    arrival_time_.Set(from._internal_arrival_time(), 
      GetArenaForAllocation());
  }
  departure_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departure_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departure_time().empty()) {
    departure_time_.Set(from._internal_departure_time(), 
      GetArenaForAllocation());
  }
  stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_id().empty()) {
    stop_id_.Set(from._internal_stop_id(), 
      GetArenaForAllocation());
  }
  stop_headsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_headsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_headsign().empty()) {
    stop_headsign_.Set(from._internal_stop_headsign(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stop_sequence_, &from.stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&timepoint_) -
    reinterpret_cast<char*>(&stop_sequence_)) + sizeof(timepoint_));
  // @@protoc_insertion_point(copy_constructor:transit_scheduled.StopTime)
}

inline void StopTime::SharedCtor() {
trip_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
arrival_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  arrival_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
departure_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departure_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_headsign_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_headsign_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_sequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timepoint_) -
    reinterpret_cast<char*>(&stop_sequence_)) + sizeof(timepoint_));
}

StopTime::~StopTime() {
  // @@protoc_insertion_point(destructor:transit_scheduled.StopTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trip_id_.Destroy();
  arrival_time_.Destroy();
  departure_time_.Destroy();
  stop_id_.Destroy();
  stop_headsign_.Destroy();
}

void StopTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopTime::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_scheduled.StopTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_id_.ClearToEmpty();
  arrival_time_.ClearToEmpty();
  departure_time_.ClearToEmpty();
  stop_id_.ClearToEmpty();
  stop_headsign_.ClearToEmpty();
  ::memset(&stop_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timepoint_) -
      reinterpret_cast<char*>(&stop_sequence_)) + sizeof(timepoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trip_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.StopTime.trip_id"));
        } else
          goto handle_unusual;
        continue;
      // string arrival_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arrival_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.StopTime.arrival_time"));
        } else
          goto handle_unusual;
        continue;
      // string departure_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_departure_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.StopTime.departure_time"));
        } else
          goto handle_unusual;
        continue;
      // string stop_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.StopTime.stop_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 stop_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          stop_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stop_headsign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stop_headsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transit_scheduled.StopTime.stop_headsign"));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.StopTime.PickupType pickup_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pickup_type(static_cast<::transit_scheduled::StopTime_PickupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.StopTime.DropOffType drop_off_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_drop_off_type(static_cast<::transit_scheduled::StopTime_DropOffType>(val));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.ContinuousPickup continuous_pickup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_pickup(static_cast<::transit_scheduled::ContinuousPickup>(val));
        } else
          goto handle_unusual;
        continue;
      // .transit_scheduled.ContinuousDropOff continuous_drop_off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_drop_off(static_cast<::transit_scheduled::ContinuousDropOff>(val));
        } else
          goto handle_unusual;
        continue;
      // float shape_dist_traveled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          shape_dist_traveled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 timepoint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          timepoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_scheduled.StopTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trip_id = 1;
  if (!this->_internal_trip_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trip_id().data(), static_cast<int>(this->_internal_trip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.StopTime.trip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trip_id(), target);
  }

  // string arrival_time = 2;
  if (!this->_internal_arrival_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arrival_time().data(), static_cast<int>(this->_internal_arrival_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.StopTime.arrival_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arrival_time(), target);
  }

  // string departure_time = 3;
  if (!this->_internal_departure_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departure_time().data(), static_cast<int>(this->_internal_departure_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.StopTime.departure_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_departure_time(), target);
  }

  // string stop_id = 4;
  if (!this->_internal_stop_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.StopTime.stop_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stop_id(), target);
  }

  // uint32 stop_sequence = 5;
  if (this->_internal_stop_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_stop_sequence(), target);
  }

  // string stop_headsign = 6;
  if (!this->_internal_stop_headsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_headsign().data(), static_cast<int>(this->_internal_stop_headsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transit_scheduled.StopTime.stop_headsign");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stop_headsign(), target);
  }

  // .transit_scheduled.StopTime.PickupType pickup_type = 7;
  if (this->_internal_pickup_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_pickup_type(), target);
  }

  // .transit_scheduled.StopTime.DropOffType drop_off_type = 8;
  if (this->_internal_drop_off_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_drop_off_type(), target);
  }

  // .transit_scheduled.ContinuousPickup continuous_pickup = 9;
  if (this->_internal_continuous_pickup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_continuous_pickup(), target);
  }

  // .transit_scheduled.ContinuousDropOff continuous_drop_off = 10;
  if (this->_internal_continuous_drop_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_continuous_drop_off(), target);
  }

  // float shape_dist_traveled = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shape_dist_traveled = this->_internal_shape_dist_traveled();
  uint32_t raw_shape_dist_traveled;
  memcpy(&raw_shape_dist_traveled, &tmp_shape_dist_traveled, sizeof(tmp_shape_dist_traveled));
  if (raw_shape_dist_traveled != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_shape_dist_traveled(), target);
  }

  // uint32 timepoint = 12;
  if (this->_internal_timepoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timepoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_scheduled.StopTime)
  return target;
}

size_t StopTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_scheduled.StopTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trip_id = 1;
  if (!this->_internal_trip_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trip_id());
  }

  // string arrival_time = 2;
  if (!this->_internal_arrival_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arrival_time());
  }

  // string departure_time = 3;
  if (!this->_internal_departure_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_departure_time());
  }

  // string stop_id = 4;
  if (!this->_internal_stop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_id());
  }

  // string stop_headsign = 6;
  if (!this->_internal_stop_headsign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_headsign());
  }

  // uint32 stop_sequence = 5;
  if (this->_internal_stop_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_sequence());
  }

  // .transit_scheduled.StopTime.PickupType pickup_type = 7;
  if (this->_internal_pickup_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pickup_type());
  }

  // .transit_scheduled.StopTime.DropOffType drop_off_type = 8;
  if (this->_internal_drop_off_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_drop_off_type());
  }

  // .transit_scheduled.ContinuousPickup continuous_pickup = 9;
  if (this->_internal_continuous_pickup() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_continuous_pickup());
  }

  // .transit_scheduled.ContinuousDropOff continuous_drop_off = 10;
  if (this->_internal_continuous_drop_off() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_continuous_drop_off());
  }

  // float shape_dist_traveled = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shape_dist_traveled = this->_internal_shape_dist_traveled();
  uint32_t raw_shape_dist_traveled;
  memcpy(&raw_shape_dist_traveled, &tmp_shape_dist_traveled, sizeof(tmp_shape_dist_traveled));
  if (raw_shape_dist_traveled != 0) {
    total_size += 1 + 4;
  }

  // uint32 timepoint = 12;
  if (this->_internal_timepoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timepoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopTime::GetClassData() const { return &_class_data_; }

void StopTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopTime *>(to)->MergeFrom(
      static_cast<const StopTime &>(from));
}


void StopTime::MergeFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_scheduled.StopTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trip_id().empty()) {
    _internal_set_trip_id(from._internal_trip_id());
  }
  if (!from._internal_arrival_time().empty()) {
    _internal_set_arrival_time(from._internal_arrival_time());
  }
  if (!from._internal_departure_time().empty()) {
    _internal_set_departure_time(from._internal_departure_time());
  }
  if (!from._internal_stop_id().empty()) {
    _internal_set_stop_id(from._internal_stop_id());
  }
  if (!from._internal_stop_headsign().empty()) {
    _internal_set_stop_headsign(from._internal_stop_headsign());
  }
  if (from._internal_stop_sequence() != 0) {
    _internal_set_stop_sequence(from._internal_stop_sequence());
  }
  if (from._internal_pickup_type() != 0) {
    _internal_set_pickup_type(from._internal_pickup_type());
  }
  if (from._internal_drop_off_type() != 0) {
    _internal_set_drop_off_type(from._internal_drop_off_type());
  }
  if (from._internal_continuous_pickup() != 0) {
    _internal_set_continuous_pickup(from._internal_continuous_pickup());
  }
  if (from._internal_continuous_drop_off() != 0) {
    _internal_set_continuous_drop_off(from._internal_continuous_drop_off());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shape_dist_traveled = from._internal_shape_dist_traveled();
  uint32_t raw_shape_dist_traveled;
  memcpy(&raw_shape_dist_traveled, &tmp_shape_dist_traveled, sizeof(tmp_shape_dist_traveled));
  if (raw_shape_dist_traveled != 0) {
    _internal_set_shape_dist_traveled(from._internal_shape_dist_traveled());
  }
  if (from._internal_timepoint() != 0) {
    _internal_set_timepoint(from._internal_timepoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopTime::CopyFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_scheduled.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTime::IsInitialized() const {
  return true;
}

void StopTime::InternalSwap(StopTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trip_id_, lhs_arena,
      &other->trip_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &arrival_time_, lhs_arena,
      &other->arrival_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &departure_time_, lhs_arena,
      &other->departure_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_id_, lhs_arena,
      &other->stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stop_headsign_, lhs_arena,
      &other->stop_headsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopTime, timepoint_)
      + sizeof(StopTime::timepoint_)
      - PROTOBUF_FIELD_OFFSET(StopTime, stop_sequence_)>(
          reinterpret_cast<char*>(&stop_sequence_),
          reinterpret_cast<char*>(&other->stop_sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_getter, &descriptor_table_protos_2fv1_2fgtfs_2dschedule_2eproto_once,
      file_level_metadata_protos_2fv1_2fgtfs_2dschedule_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transit_scheduled
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transit_scheduled::Agency*
Arena::CreateMaybeMessage< ::transit_scheduled::Agency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_scheduled::Agency >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_scheduled::Stop*
Arena::CreateMaybeMessage< ::transit_scheduled::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_scheduled::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_scheduled::Route*
Arena::CreateMaybeMessage< ::transit_scheduled::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_scheduled::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_scheduled::Trip*
Arena::CreateMaybeMessage< ::transit_scheduled::Trip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_scheduled::Trip >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_scheduled::StopTime*
Arena::CreateMaybeMessage< ::transit_scheduled::StopTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_scheduled::StopTime >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
