// source: protos/v1/gtfs-schedule.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.transit_scheduled.Route');
goog.provide('proto.transit_scheduled.Route.RouteType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.transit_scheduled.ContinuousDropOff');
goog.forwardDeclare('proto.transit_scheduled.ContinuousPickup');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_scheduled.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_scheduled.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_scheduled.Route.displayName = 'proto.transit_scheduled.Route';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_scheduled.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_scheduled.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_scheduled.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_scheduled.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agencyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    routeShortName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routeLongName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    routeDesc: jspb.Message.getFieldWithDefault(msg, 5, ""),
    routeType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    routeUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    routeColor: jspb.Message.getFieldWithDefault(msg, 8, ""),
    routeTextColor: jspb.Message.getFieldWithDefault(msg, 9, ""),
    routeSortOrder: jspb.Message.getFieldWithDefault(msg, 10, 0),
    continuousPickup: jspb.Message.getFieldWithDefault(msg, 11, 0),
    continuousDropOff: jspb.Message.getFieldWithDefault(msg, 12, 0),
    networkId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_scheduled.Route}
 */
proto.transit_scheduled.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_scheduled.Route;
  return proto.transit_scheduled.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_scheduled.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_scheduled.Route}
 */
proto.transit_scheduled.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgencyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteShortName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteLongName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteDesc(value);
      break;
    case 6:
      var value = /** @type {!proto.transit_scheduled.Route.RouteType} */ (reader.readEnum());
      msg.setRouteType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteColor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteTextColor(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRouteSortOrder(value);
      break;
    case 11:
      var value = /** @type {!proto.transit_scheduled.ContinuousPickup} */ (reader.readEnum());
      msg.setContinuousPickup(value);
      break;
    case 12:
      var value = /** @type {!proto.transit_scheduled.ContinuousDropOff} */ (reader.readEnum());
      msg.setContinuousDropOff(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_scheduled.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_scheduled.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_scheduled.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_scheduled.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRouteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgencyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRouteShortName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRouteLongName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRouteDesc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRouteType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRouteUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRouteColor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRouteTextColor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRouteSortOrder();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getContinuousPickup();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getContinuousDropOff();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.transit_scheduled.Route.RouteType = {
  ROUTE_TYPE_TRAM_STREETCAR_LIGHTRAIL: 0,
  ROUTE_TYPE_SUBWAY_METRO: 1,
  ROUTE_TYPE_RAIL: 2,
  ROUTE_TYPE_BUS: 3,
  ROUTE_TYPE_FERRY: 4,
  ROUTE_TYPE_CABLE_TRAM: 5,
  ROUTE_TYPE_AERIAL_LIFT_SUSPENDED_CABLE_CAR: 6,
  ROUTE_TYPE_FUNICULAR: 7,
  ROUTE_TYPE_TROLLEYBUS: 11,
  ROUTE_TYPE_MONORAIL: 12
};

/**
 * optional string route_id = 1;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string agency_id = 2;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getAgencyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setAgencyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string route_short_name = 3;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteShortName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteShortName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string route_long_name = 4;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteLongName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteLongName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string route_desc = 5;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional RouteType route_type = 6;
 * @return {!proto.transit_scheduled.Route.RouteType}
 */
proto.transit_scheduled.Route.prototype.getRouteType = function() {
  return /** @type {!proto.transit_scheduled.Route.RouteType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.transit_scheduled.Route.RouteType} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string route_url = 7;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string route_color = 8;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteColor = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string route_text_color = 9;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getRouteTextColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteTextColor = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint32 route_sort_order = 10;
 * @return {number}
 */
proto.transit_scheduled.Route.prototype.getRouteSortOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setRouteSortOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional ContinuousPickup continuous_pickup = 11;
 * @return {!proto.transit_scheduled.ContinuousPickup}
 */
proto.transit_scheduled.Route.prototype.getContinuousPickup = function() {
  return /** @type {!proto.transit_scheduled.ContinuousPickup} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.transit_scheduled.ContinuousPickup} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setContinuousPickup = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional ContinuousDropOff continuous_drop_off = 12;
 * @return {!proto.transit_scheduled.ContinuousDropOff}
 */
proto.transit_scheduled.Route.prototype.getContinuousDropOff = function() {
  return /** @type {!proto.transit_scheduled.ContinuousDropOff} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.transit_scheduled.ContinuousDropOff} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setContinuousDropOff = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string network_id = 13;
 * @return {string}
 */
proto.transit_scheduled.Route.prototype.getNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_scheduled.Route} returns this
 */
proto.transit_scheduled.Route.prototype.setNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


