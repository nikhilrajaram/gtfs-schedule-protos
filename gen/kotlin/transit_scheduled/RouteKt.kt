//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protos/v1/gtfs-schedule.proto

package transit_scheduled;

@kotlin.jvm.JvmName("-initializeroute")
public inline fun route(block: transit_scheduled.RouteKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Route =
  transit_scheduled.RouteKt.Dsl._create(transit_scheduled.GtfsSchedule.Route.newBuilder()).apply { block() }._build()
public object RouteKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transit_scheduled.GtfsSchedule.Route.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transit_scheduled.GtfsSchedule.Route.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transit_scheduled.GtfsSchedule.Route = _builder.build()

    /**
     * <pre>
     * Identifies a route.
     * Required
     * </pre>
     *
     * <code>string route_id = 1;</code>
     */
    public var routeId: kotlin.String
      @JvmName("getRouteId")
      get() = _builder.getRouteId()
      @JvmName("setRouteId")
      set(value) {
        _builder.setRouteId(value)
      }
    /**
     * <pre>
     * Identifies a route.
     * Required
     * </pre>
     *
     * <code>string route_id = 1;</code>
     */
    public fun clearRouteId() {
      _builder.clearRouteId()
    }

    /**
     * <pre>
     * Agency for the specified route.
     * Conditionally Required:
     * - Required if multiple agencies are defined in agency.txt.
     * - Recommended otherwise.
     * </pre>
     *
     * <code>string agency_id = 2;</code>
     */
    public var agencyId: kotlin.String
      @JvmName("getAgencyId")
      get() = _builder.getAgencyId()
      @JvmName("setAgencyId")
      set(value) {
        _builder.setAgencyId(value)
      }
    /**
     * <pre>
     * Agency for the specified route.
     * Conditionally Required:
     * - Required if multiple agencies are defined in agency.txt.
     * - Recommended otherwise.
     * </pre>
     *
     * <code>string agency_id = 2;</code>
     */
    public fun clearAgencyId() {
      _builder.clearAgencyId()
    }

    /**
     * <pre>
     * Short name of a route. Often a short, abstract identifier (e.g., "32",
     * "100X", "Green") that riders use to identify a route. Both route_short_name
     * and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_long_name is empty.
     * - Recommended if there is a brief service designation. This should be the
     * commonly-known passenger name of the service, and should be no longer than
     * 12 characters.
     * </pre>
     *
     * <code>string route_short_name = 3;</code>
     */
    public var routeShortName: kotlin.String
      @JvmName("getRouteShortName")
      get() = _builder.getRouteShortName()
      @JvmName("setRouteShortName")
      set(value) {
        _builder.setRouteShortName(value)
      }
    /**
     * <pre>
     * Short name of a route. Often a short, abstract identifier (e.g., "32",
     * "100X", "Green") that riders use to identify a route. Both route_short_name
     * and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_long_name is empty.
     * - Recommended if there is a brief service designation. This should be the
     * commonly-known passenger name of the service, and should be no longer than
     * 12 characters.
     * </pre>
     *
     * <code>string route_short_name = 3;</code>
     */
    public fun clearRouteShortName() {
      _builder.clearRouteShortName()
    }

    /**
     * <pre>
     * Full name of a route. This name is generally more descriptive than the
     * route_short_name and often includes the route's destination or stop. Both
     * route_short_name and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_short_name is empty.
     * - Optional otherwise.
     * </pre>
     *
     * <code>string route_long_name = 4;</code>
     */
    public var routeLongName: kotlin.String
      @JvmName("getRouteLongName")
      get() = _builder.getRouteLongName()
      @JvmName("setRouteLongName")
      set(value) {
        _builder.setRouteLongName(value)
      }
    /**
     * <pre>
     * Full name of a route. This name is generally more descriptive than the
     * route_short_name and often includes the route's destination or stop. Both
     * route_short_name and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_short_name is empty.
     * - Optional otherwise.
     * </pre>
     *
     * <code>string route_long_name = 4;</code>
     */
    public fun clearRouteLongName() {
      _builder.clearRouteLongName()
    }

    /**
     * <pre>
     * Description of a route that provides useful, quality information. Should
     * not be a duplicate of route_short_name or route_long_name.
     * </pre>
     *
     * <code>string route_desc = 5;</code>
     */
    public var routeDesc: kotlin.String
      @JvmName("getRouteDesc")
      get() = _builder.getRouteDesc()
      @JvmName("setRouteDesc")
      set(value) {
        _builder.setRouteDesc(value)
      }
    /**
     * <pre>
     * Description of a route that provides useful, quality information. Should
     * not be a duplicate of route_short_name or route_long_name.
     * </pre>
     *
     * <code>string route_desc = 5;</code>
     */
    public fun clearRouteDesc() {
      _builder.clearRouteDesc()
    }

    /**
     * <pre>
     * Indicates the type of transportation used on a route.
     * Required
     * </pre>
     *
     * <code>.transit_scheduled.Route.RouteType route_type = 6;</code>
     */
    public var routeType: transit_scheduled.GtfsSchedule.Route.RouteType
      @JvmName("getRouteType")
      get() = _builder.getRouteType()
      @JvmName("setRouteType")
      set(value) {
        _builder.setRouteType(value)
      }
    /**
     * <pre>
     * Indicates the type of transportation used on a route.
     * Required
     * </pre>
     *
     * <code>.transit_scheduled.Route.RouteType route_type = 6;</code>
     */
    public fun clearRouteType() {
      _builder.clearRouteType()
    }

    /**
     * <pre>
     * URL of a web page about the particular route. Should be different from the
     * agency.agency_url value.
     * </pre>
     *
     * <code>string route_url = 7;</code>
     */
    public var routeUrl: kotlin.String
      @JvmName("getRouteUrl")
      get() = _builder.getRouteUrl()
      @JvmName("setRouteUrl")
      set(value) {
        _builder.setRouteUrl(value)
      }
    /**
     * <pre>
     * URL of a web page about the particular route. Should be different from the
     * agency.agency_url value.
     * </pre>
     *
     * <code>string route_url = 7;</code>
     */
    public fun clearRouteUrl() {
      _builder.clearRouteUrl()
    }

    /**
     * <pre>
     * Route color designation that matches public facing material. Defaults to
     * white (FFFFFF) when omitted or left empty. The color difference between
     * route_color and route_text_color should provide sufficient contrast when
     * viewed on a black and white screen.
     * </pre>
     *
     * <code>string route_color = 8;</code>
     */
    public var routeColor: kotlin.String
      @JvmName("getRouteColor")
      get() = _builder.getRouteColor()
      @JvmName("setRouteColor")
      set(value) {
        _builder.setRouteColor(value)
      }
    /**
     * <pre>
     * Route color designation that matches public facing material. Defaults to
     * white (FFFFFF) when omitted or left empty. The color difference between
     * route_color and route_text_color should provide sufficient contrast when
     * viewed on a black and white screen.
     * </pre>
     *
     * <code>string route_color = 8;</code>
     */
    public fun clearRouteColor() {
      _builder.clearRouteColor()
    }

    /**
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * Defaults to black (000000) when omitted or left empty. The color difference
     * between route_color and route_text_color should provide sufficient contrast
     * when viewed on a black and white screen.
     * </pre>
     *
     * <code>string route_text_color = 9;</code>
     */
    public var routeTextColor: kotlin.String
      @JvmName("getRouteTextColor")
      get() = _builder.getRouteTextColor()
      @JvmName("setRouteTextColor")
      set(value) {
        _builder.setRouteTextColor(value)
      }
    /**
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * Defaults to black (000000) when omitted or left empty. The color difference
     * between route_color and route_text_color should provide sufficient contrast
     * when viewed on a black and white screen.
     * </pre>
     *
     * <code>string route_text_color = 9;</code>
     */
    public fun clearRouteTextColor() {
      _builder.clearRouteTextColor()
    }

    /**
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers.
     * Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     *
     * <code>uint32 route_sort_order = 10;</code>
     */
    public var routeSortOrder: kotlin.Int
      @JvmName("getRouteSortOrder")
      get() = _builder.getRouteSortOrder()
      @JvmName("setRouteSortOrder")
      set(value) {
        _builder.setRouteSortOrder(value)
      }
    /**
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers.
     * Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     *
     * <code>uint32 route_sort_order = 10;</code>
     */
    public fun clearRouteSortOrder() {
      _builder.clearRouteSortOrder()
    }

    /**
     * <pre>
     * Indicates that the rider can board the transit vehicle at any point along
     * the vehicle’s travel path as described by shapes.txt, on every trip of the
     * route.
     * </pre>
     *
     * <code>.transit_scheduled.ContinuousPickup continuous_pickup = 11;</code>
     */
    public var continuousPickup: transit_scheduled.GtfsSchedule.ContinuousPickup
      @JvmName("getContinuousPickup")
      get() = _builder.getContinuousPickup()
      @JvmName("setContinuousPickup")
      set(value) {
        _builder.setContinuousPickup(value)
      }
    /**
     * <pre>
     * Indicates that the rider can board the transit vehicle at any point along
     * the vehicle’s travel path as described by shapes.txt, on every trip of the
     * route.
     * </pre>
     *
     * <code>.transit_scheduled.ContinuousPickup continuous_pickup = 11;</code>
     */
    public fun clearContinuousPickup() {
      _builder.clearContinuousPickup()
    }

    /**
     * <pre>
     * Indicates that the rider can alight from the transit vehicle at any point
     * along the vehicle’s travel path as described by shapes.txt, on every trip
     * of the route.
     * </pre>
     *
     * <code>.transit_scheduled.ContinuousDropOff continuous_drop_off = 12;</code>
     */
    public var continuousDropOff: transit_scheduled.GtfsSchedule.ContinuousDropOff
      @JvmName("getContinuousDropOff")
      get() = _builder.getContinuousDropOff()
      @JvmName("setContinuousDropOff")
      set(value) {
        _builder.setContinuousDropOff(value)
      }
    /**
     * <pre>
     * Indicates that the rider can alight from the transit vehicle at any point
     * along the vehicle’s travel path as described by shapes.txt, on every trip
     * of the route.
     * </pre>
     *
     * <code>.transit_scheduled.ContinuousDropOff continuous_drop_off = 12;</code>
     */
    public fun clearContinuousDropOff() {
      _builder.clearContinuousDropOff()
    }

    /**
     * <pre>
     * Identifies a group of routes. Multiple rows in routes.txt may have the same
     * network_id.
     * </pre>
     *
     * <code>string network_id = 13;</code>
     */
    public var networkId: kotlin.String
      @JvmName("getNetworkId")
      get() = _builder.getNetworkId()
      @JvmName("setNetworkId")
      set(value) {
        _builder.setNetworkId(value)
      }
    /**
     * <pre>
     * Identifies a group of routes. Multiple rows in routes.txt may have the same
     * network_id.
     * </pre>
     *
     * <code>string network_id = 13;</code>
     */
    public fun clearNetworkId() {
      _builder.clearNetworkId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transit_scheduled.GtfsSchedule.Route.copy(block: transit_scheduled.RouteKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Route =
  transit_scheduled.RouteKt.Dsl._create(this.toBuilder()).apply { block() }._build()

