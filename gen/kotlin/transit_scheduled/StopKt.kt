//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protos/v1/gtfs-schedule.proto

package transit_scheduled;

@kotlin.jvm.JvmName("-initializestop")
public inline fun stop(block: transit_scheduled.StopKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Stop =
  transit_scheduled.StopKt.Dsl._create(transit_scheduled.GtfsSchedule.Stop.newBuilder()).apply { block() }._build()
public object StopKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transit_scheduled.GtfsSchedule.Stop.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transit_scheduled.GtfsSchedule.Stop.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transit_scheduled.GtfsSchedule.Stop = _builder.build()

    /**
     * <pre>
     * Identifies a location: stop/platform, station, entrance/exit, generic node
     * or boarding area (see location_type).
     * Multiple routes may use the same stop_id.
     * Required
     * </pre>
     *
     * <code>string stop_id = 1;</code>
     */
    public var stopId: kotlin.String
      @JvmName("getStopId")
      get() = _builder.getStopId()
      @JvmName("setStopId")
      set(value) {
        _builder.setStopId(value)
      }
    /**
     * <pre>
     * Identifies a location: stop/platform, station, entrance/exit, generic node
     * or boarding area (see location_type).
     * Multiple routes may use the same stop_id.
     * Required
     * </pre>
     *
     * <code>string stop_id = 1;</code>
     */
    public fun clearStopId() {
      _builder.clearStopId()
    }

    /**
     * <pre>
     * Short text or a number that identifies the location for riders. These codes
     * are often used in phone-based transit information systems or printed on
     * signage to make it easier for riders to get information for a particular
     * location. The stop_code may be the same as stop_id if it is public facing.
     * This field should be left empty for locations without a code presented to
     * riders.
     * </pre>
     *
     * <code>string stop_code = 2;</code>
     */
    public var stopCode: kotlin.String
      @JvmName("getStopCode")
      get() = _builder.getStopCode()
      @JvmName("setStopCode")
      set(value) {
        _builder.setStopCode(value)
      }
    /**
     * <pre>
     * Short text or a number that identifies the location for riders. These codes
     * are often used in phone-based transit information systems or printed on
     * signage to make it easier for riders to get information for a particular
     * location. The stop_code may be the same as stop_id if it is public facing.
     * This field should be left empty for locations without a code presented to
     * riders.
     * </pre>
     *
     * <code>string stop_code = 2;</code>
     */
    public fun clearStopCode() {
      _builder.clearStopCode()
    }

    /**
     * <pre>
     * Name of the location. The stop_name should match the agency's rider-facing
     * name for the location as printed on a timetable, published online, or
     * represented on signage. For translations into other languages, use
     * translations.txt.
     * When the location is a boarding area (location_type=4), the stop_name
     * should contains the name of the boarding area as displayed by the agency.
     * It could be just one letter (like on some European intercity railway
     * stations), or text like “Wheelchair boarding area” (NYC’s Subway) or “Head
     * of short trains” (Paris’ RER).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>string stop_name = 3;</code>
     */
    public var stopName: kotlin.String
      @JvmName("getStopName")
      get() = _builder.getStopName()
      @JvmName("setStopName")
      set(value) {
        _builder.setStopName(value)
      }
    /**
     * <pre>
     * Name of the location. The stop_name should match the agency's rider-facing
     * name for the location as printed on a timetable, published online, or
     * represented on signage. For translations into other languages, use
     * translations.txt.
     * When the location is a boarding area (location_type=4), the stop_name
     * should contains the name of the boarding area as displayed by the agency.
     * It could be just one letter (like on some European intercity railway
     * stations), or text like “Wheelchair boarding area” (NYC’s Subway) or “Head
     * of short trains” (Paris’ RER).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>string stop_name = 3;</code>
     */
    public fun clearStopName() {
      _builder.clearStopName()
    }

    /**
     * <pre>
     * Readable version of the stop_name. See "Text-to-speech field" in the Term
     * Definitions for more https://gtfs.org/schedule/reference/#term-definitions.
     * </pre>
     *
     * <code>string tts_stop_name = 4;</code>
     */
    public var ttsStopName: kotlin.String
      @JvmName("getTtsStopName")
      get() = _builder.getTtsStopName()
      @JvmName("setTtsStopName")
      set(value) {
        _builder.setTtsStopName(value)
      }
    /**
     * <pre>
     * Readable version of the stop_name. See "Text-to-speech field" in the Term
     * Definitions for more https://gtfs.org/schedule/reference/#term-definitions.
     * </pre>
     *
     * <code>string tts_stop_name = 4;</code>
     */
    public fun clearTtsStopName() {
      _builder.clearTtsStopName()
    }

    /**
     * <pre>
     * Description of the location that provides useful, quality information.
     * Should not be a duplicate of stop_name.
     * </pre>
     *
     * <code>string stop_desc = 5;</code>
     */
    public var stopDesc: kotlin.String
      @JvmName("getStopDesc")
      get() = _builder.getStopDesc()
      @JvmName("setStopDesc")
      set(value) {
        _builder.setStopDesc(value)
      }
    /**
     * <pre>
     * Description of the location that provides useful, quality information.
     * Should not be a duplicate of stop_name.
     * </pre>
     *
     * <code>string stop_desc = 5;</code>
     */
    public fun clearStopDesc() {
      _builder.clearStopDesc()
    }

    /**
     * <pre>
     * Latitude of the location.
     * For stops/platforms (location_type=0) and boarding area (location_type=4),
     * the coordinates must be the ones of the bus pole — if exists — and
     * otherwise of where the travelers are boarding the vehicle (on the sidewalk
     * or the platform, and not on the roadway or the track where the vehicle
     * stops).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>double stop_lat = 6;</code>
     */
    public var stopLat: kotlin.Double
      @JvmName("getStopLat")
      get() = _builder.getStopLat()
      @JvmName("setStopLat")
      set(value) {
        _builder.setStopLat(value)
      }
    /**
     * <pre>
     * Latitude of the location.
     * For stops/platforms (location_type=0) and boarding area (location_type=4),
     * the coordinates must be the ones of the bus pole — if exists — and
     * otherwise of where the travelers are boarding the vehicle (on the sidewalk
     * or the platform, and not on the roadway or the track where the vehicle
     * stops).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>double stop_lat = 6;</code>
     */
    public fun clearStopLat() {
      _builder.clearStopLat()
    }

    /**
     * <pre>
     * Longitude of the location.
     * For stops/platforms (location_type=0) and boarding area (location_type=4),
     * the coordinates must be the ones of the bus pole — if exists — and
     * otherwise of where the travelers are boarding the vehicle (on the sidewalk
     * or the platform, and not on the roadway or the track where the vehicle
     * stops).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>double stop_lon = 7;</code>
     */
    public var stopLon: kotlin.Double
      @JvmName("getStopLon")
      get() = _builder.getStopLon()
      @JvmName("setStopLon")
      set(value) {
        _builder.setStopLon(value)
      }
    /**
     * <pre>
     * Longitude of the location.
     * For stops/platforms (location_type=0) and boarding area (location_type=4),
     * the coordinates must be the ones of the bus pole — if exists — and
     * otherwise of where the travelers are boarding the vehicle (on the sidewalk
     * or the platform, and not on the roadway or the track where the vehicle
     * stops).
     * Conditionally Required:
     * - Required for locations which are stops (location_type=0), stations
     * (location_type=1) or entrances/exits (location_type=2).
     * - Optional for locations which are generic nodes (location_type=3) or
     * boarding areas (location_type=4).
     * </pre>
     *
     * <code>double stop_lon = 7;</code>
     */
    public fun clearStopLon() {
      _builder.clearStopLon()
    }

    /**
     * <pre>
     * Identifies the fare zone for a stop. If this record represents a station or
     * station entrance, the zone_id is ignored.
     * Conditionally Required:
     * - Required if providing fare information using fare_rules.txt
     * - Optional otherwise.
     * </pre>
     *
     * <code>string zone_id = 8;</code>
     */
    public var zoneId: kotlin.String
      @JvmName("getZoneId")
      get() = _builder.getZoneId()
      @JvmName("setZoneId")
      set(value) {
        _builder.setZoneId(value)
      }
    /**
     * <pre>
     * Identifies the fare zone for a stop. If this record represents a station or
     * station entrance, the zone_id is ignored.
     * Conditionally Required:
     * - Required if providing fare information using fare_rules.txt
     * - Optional otherwise.
     * </pre>
     *
     * <code>string zone_id = 8;</code>
     */
    public fun clearZoneId() {
      _builder.clearZoneId()
    }

    /**
     * <pre>
     * URL of a web page about the location. This should be different from the
     * agency.agency_url and the routes.route_url field values.
     * </pre>
     *
     * <code>string stop_url = 9;</code>
     */
    public var stopUrl: kotlin.String
      @JvmName("getStopUrl")
      get() = _builder.getStopUrl()
      @JvmName("setStopUrl")
      set(value) {
        _builder.setStopUrl(value)
      }
    /**
     * <pre>
     * URL of a web page about the location. This should be different from the
     * agency.agency_url and the routes.route_url field values.
     * </pre>
     *
     * <code>string stop_url = 9;</code>
     */
    public fun clearStopUrl() {
      _builder.clearStopUrl()
    }

    /**
     * <pre>
     * Location type.
     * </pre>
     *
     * <code>.transit_scheduled.Stop.LocationType location_type = 10;</code>
     */
    public var locationType: transit_scheduled.GtfsSchedule.Stop.LocationType
      @JvmName("getLocationType")
      get() = _builder.getLocationType()
      @JvmName("setLocationType")
      set(value) {
        _builder.setLocationType(value)
      }
    /**
     * <pre>
     * Location type.
     * </pre>
     *
     * <code>.transit_scheduled.Stop.LocationType location_type = 10;</code>
     */
    public fun clearLocationType() {
      _builder.clearLocationType()
    }

    /**
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt. It
     * contains the ID of the parent location, as followed:
     * - Stop/platform (location_type=0): the parent_station field contains the ID
     * of a station.
     * - Station (location_type=1): this field must be empty.
     * - Entrance/exit (location_type=2) or generic node (location_type=3): the
     * parent_station field contains the ID of a station (location_type=1)
     * - Boarding Area (location_type=4): the parent_station field contains ID of
     * a platform.
     * Conditionally Required:
     * - Required for locations which are entrances (location_type=2), generic
     * nodes (location_type=3) or boarding areas (location_type=4).
     * - Optional for stops/platforms (location_type=0).
     * - Forbidden for stations (location_type=1).
     * </pre>
     *
     * <code>string parent_station = 11;</code>
     */
    public var parentStation: kotlin.String
      @JvmName("getParentStation")
      get() = _builder.getParentStation()
      @JvmName("setParentStation")
      set(value) {
        _builder.setParentStation(value)
      }
    /**
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt. It
     * contains the ID of the parent location, as followed:
     * - Stop/platform (location_type=0): the parent_station field contains the ID
     * of a station.
     * - Station (location_type=1): this field must be empty.
     * - Entrance/exit (location_type=2) or generic node (location_type=3): the
     * parent_station field contains the ID of a station (location_type=1)
     * - Boarding Area (location_type=4): the parent_station field contains ID of
     * a platform.
     * Conditionally Required:
     * - Required for locations which are entrances (location_type=2), generic
     * nodes (location_type=3) or boarding areas (location_type=4).
     * - Optional for stops/platforms (location_type=0).
     * - Forbidden for stations (location_type=1).
     * </pre>
     *
     * <code>string parent_station = 11;</code>
     */
    public fun clearParentStation() {
      _builder.clearParentStation()
    }

    /**
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits
     * the parent station’s timezone instead of applying its own. Stations and
     * parentless stops with empty stop_timezone inherit the timezone specified by
     * agency.agency_timezone. If stop_timezone values are provided, the times in
     * stop_times.txt should be entered as the time since midnight in the timezone
     * specified by agency.agency_timezone. This ensures that the time values in a
     * trip always increase over the course of a trip, regardless of which
     * timezones the trip crosses.
     * </pre>
     *
     * <code>string stop_timezone = 12;</code>
     */
    public var stopTimezone: kotlin.String
      @JvmName("getStopTimezone")
      get() = _builder.getStopTimezone()
      @JvmName("setStopTimezone")
      set(value) {
        _builder.setStopTimezone(value)
      }
    /**
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits
     * the parent station’s timezone instead of applying its own. Stations and
     * parentless stops with empty stop_timezone inherit the timezone specified by
     * agency.agency_timezone. If stop_timezone values are provided, the times in
     * stop_times.txt should be entered as the time since midnight in the timezone
     * specified by agency.agency_timezone. This ensures that the time values in a
     * trip always increase over the course of a trip, regardless of which
     * timezones the trip crosses.
     * </pre>
     *
     * <code>string stop_timezone = 12;</code>
     */
    public fun clearStopTimezone() {
      _builder.clearStopTimezone()
    }

    /**
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     *
     * <code>.transit_scheduled.Stop.WheelchairBoarding wheelchair_boarding = 13;</code>
     */
    public var wheelchairBoarding: transit_scheduled.GtfsSchedule.Stop.WheelchairBoarding
      @JvmName("getWheelchairBoarding")
      get() = _builder.getWheelchairBoarding()
      @JvmName("setWheelchairBoarding")
      set(value) {
        _builder.setWheelchairBoarding(value)
      }
    /**
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     *
     * <code>.transit_scheduled.Stop.WheelchairBoarding wheelchair_boarding = 13;</code>
     */
    public fun clearWheelchairBoarding() {
      _builder.clearWheelchairBoarding()
    }

    /**
     * <pre>
     * Level of the location. The same level may be used by multiple unlinked
     * stations.
     * </pre>
     *
     * <code>string level_id = 14;</code>
     */
    public var levelId: kotlin.String
      @JvmName("getLevelId")
      get() = _builder.getLevelId()
      @JvmName("setLevelId")
      set(value) {
        _builder.setLevelId(value)
      }
    /**
     * <pre>
     * Level of the location. The same level may be used by multiple unlinked
     * stations.
     * </pre>
     *
     * <code>string level_id = 14;</code>
     */
    public fun clearLevelId() {
      _builder.clearLevelId()
    }

    /**
     * <pre>
     * Platform identifier for a platform stop (a stop belonging to a station).
     * This should be just the platform identifier (eg. "G" or "3"). Words like
     * “platform” or "track" (or the feed’s language-specific equivalent) should
     * not be included. This allows feed consumers to more easily internationalize
     * and localize the platform identifier into other languages.
     * </pre>
     *
     * <code>string platform_code = 15;</code>
     */
    public var platformCode: kotlin.String
      @JvmName("getPlatformCode")
      get() = _builder.getPlatformCode()
      @JvmName("setPlatformCode")
      set(value) {
        _builder.setPlatformCode(value)
      }
    /**
     * <pre>
     * Platform identifier for a platform stop (a stop belonging to a station).
     * This should be just the platform identifier (eg. "G" or "3"). Words like
     * “platform” or "track" (or the feed’s language-specific equivalent) should
     * not be included. This allows feed consumers to more easily internationalize
     * and localize the platform identifier into other languages.
     * </pre>
     *
     * <code>string platform_code = 15;</code>
     */
    public fun clearPlatformCode() {
      _builder.clearPlatformCode()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transit_scheduled.GtfsSchedule.Stop.copy(block: transit_scheduled.StopKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Stop =
  transit_scheduled.StopKt.Dsl._create(this.toBuilder()).apply { block() }._build()

