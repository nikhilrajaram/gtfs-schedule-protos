//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protos/v1/gtfs-schedule.proto

package transit_scheduled;

@kotlin.jvm.JvmName("-initializetrip")
public inline fun trip(block: transit_scheduled.TripKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Trip =
  transit_scheduled.TripKt.Dsl._create(transit_scheduled.GtfsSchedule.Trip.newBuilder()).apply { block() }._build()
public object TripKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transit_scheduled.GtfsSchedule.Trip.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transit_scheduled.GtfsSchedule.Trip.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transit_scheduled.GtfsSchedule.Trip = _builder.build()

    /**
     * <pre>
     * Identifies a route.
     * Required
     * </pre>
     *
     * <code>string route_id = 1;</code>
     */
    public var routeId: kotlin.String
      @JvmName("getRouteId")
      get() = _builder.getRouteId()
      @JvmName("setRouteId")
      set(value) {
        _builder.setRouteId(value)
      }
    /**
     * <pre>
     * Identifies a route.
     * Required
     * </pre>
     *
     * <code>string route_id = 1;</code>
     */
    public fun clearRouteId() {
      _builder.clearRouteId()
    }

    /**
     * <pre>
     * Identifies a set of dates when service is available for one or more routes.
     * Required
     * </pre>
     *
     * <code>string service_id = 2;</code>
     */
    public var serviceId: kotlin.String
      @JvmName("getServiceId")
      get() = _builder.getServiceId()
      @JvmName("setServiceId")
      set(value) {
        _builder.setServiceId(value)
      }
    /**
     * <pre>
     * Identifies a set of dates when service is available for one or more routes.
     * Required
     * </pre>
     *
     * <code>string service_id = 2;</code>
     */
    public fun clearServiceId() {
      _builder.clearServiceId()
    }

    /**
     * <pre>
     * Identifies a trip.
     * Required
     * </pre>
     *
     * <code>string trip_id = 3;</code>
     */
    public var tripId: kotlin.String
      @JvmName("getTripId")
      get() = _builder.getTripId()
      @JvmName("setTripId")
      set(value) {
        _builder.setTripId(value)
      }
    /**
     * <pre>
     * Identifies a trip.
     * Required
     * </pre>
     *
     * <code>string trip_id = 3;</code>
     */
    public fun clearTripId() {
      _builder.clearTripId()
    }

    /**
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * Should be used to distinguish between different patterns of service on the
     * same route.
     * If the headsign changes during a trip, values for trip_headsign may be
     * overridden by defining values in stop_times.stop_headsign for specific
     * stop_times along the trip.
     * </pre>
     *
     * <code>string trip_headsign = 4;</code>
     */
    public var tripHeadsign: kotlin.String
      @JvmName("getTripHeadsign")
      get() = _builder.getTripHeadsign()
      @JvmName("setTripHeadsign")
      set(value) {
        _builder.setTripHeadsign(value)
      }
    /**
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * Should be used to distinguish between different patterns of service on the
     * same route.
     * If the headsign changes during a trip, values for trip_headsign may be
     * overridden by defining values in stop_times.stop_headsign for specific
     * stop_times along the trip.
     * </pre>
     *
     * <code>string trip_headsign = 4;</code>
     */
    public fun clearTripHeadsign() {
      _builder.clearTripHeadsign()
    }

    /**
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to
     * identify train numbers for commuter rail trips. If riders do not commonly
     * rely on trip names, trip_short_name should be empty. A trip_short_name
     * value, if provided, should uniquely identify a trip within a service day;
     * it should not be used for destination names or limited/express
     * designations.
     * </pre>
     *
     * <code>string trip_short_name = 5;</code>
     */
    public var tripShortName: kotlin.String
      @JvmName("getTripShortName")
      get() = _builder.getTripShortName()
      @JvmName("setTripShortName")
      set(value) {
        _builder.setTripShortName(value)
      }
    /**
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to
     * identify train numbers for commuter rail trips. If riders do not commonly
     * rely on trip names, trip_short_name should be empty. A trip_short_name
     * value, if provided, should uniquely identify a trip within a service day;
     * it should not be used for destination names or limited/express
     * designations.
     * </pre>
     *
     * <code>string trip_short_name = 5;</code>
     */
    public fun clearTripShortName() {
      _builder.clearTripShortName()
    }

    /**
     * <pre>
     * Indicates the direction of travel for a trip.
     * This field should not be used in routing; it provides a way to separate
     * trips by direction when publishing time tables.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.Direction direction_id = 6;</code>
     */
    public var directionId: transit_scheduled.GtfsSchedule.Trip.Direction
      @JvmName("getDirectionId")
      get() = _builder.getDirectionId()
      @JvmName("setDirectionId")
      set(value) {
        _builder.setDirectionId(value)
      }
    /**
     * <pre>
     * Indicates the direction of travel for a trip.
     * This field should not be used in routing; it provides a way to separate
     * trips by direction when publishing time tables.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.Direction direction_id = 6;</code>
     */
    public fun clearDirectionId() {
      _builder.clearDirectionId()
    }

    /**
     * <pre>
     * Identifies the block to which the trip belongs. A block consists of a
     * single trip or many sequential trips made using the same vehicle, defined
     * by shared service days and block_id. A block_id may have trips with
     * different service days, making distinct blocks. See the example below. To
     * provide in-seat transfers information, transfers of transfer_type 4 should
     * be provided instead.
     * </pre>
     *
     * <code>string block_id = 7;</code>
     */
    public var blockId: kotlin.String
      @JvmName("getBlockId")
      get() = _builder.getBlockId()
      @JvmName("setBlockId")
      set(value) {
        _builder.setBlockId(value)
      }
    /**
     * <pre>
     * Identifies the block to which the trip belongs. A block consists of a
     * single trip or many sequential trips made using the same vehicle, defined
     * by shared service days and block_id. A block_id may have trips with
     * different service days, making distinct blocks. See the example below. To
     * provide in-seat transfers information, transfers of transfer_type 4 should
     * be provided instead.
     * </pre>
     *
     * <code>string block_id = 7;</code>
     */
    public fun clearBlockId() {
      _builder.clearBlockId()
    }

    /**
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a
     * trip.
     * Conditionally Required:
     * - Required if the trip has a continuous pickup or drop-off behavior defined
     * either in routes.txt or in stop_times.txt.
     * - Optional otherwise.
     * </pre>
     *
     * <code>string shape_id = 8;</code>
     */
    public var shapeId: kotlin.String
      @JvmName("getShapeId")
      get() = _builder.getShapeId()
      @JvmName("setShapeId")
      set(value) {
        _builder.setShapeId(value)
      }
    /**
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a
     * trip.
     * Conditionally Required:
     * - Required if the trip has a continuous pickup or drop-off behavior defined
     * either in routes.txt or in stop_times.txt.
     * - Optional otherwise.
     * </pre>
     *
     * <code>string shape_id = 8;</code>
     */
    public fun clearShapeId() {
      _builder.clearShapeId()
    }

    /**
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;</code>
     */
    public var wheelchairAccessible: transit_scheduled.GtfsSchedule.Trip.WheelchairAccessibility
      @JvmName("getWheelchairAccessible")
      get() = _builder.getWheelchairAccessible()
      @JvmName("setWheelchairAccessible")
      set(value) {
        _builder.setWheelchairAccessible(value)
      }
    /**
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;</code>
     */
    public fun clearWheelchairAccessible() {
      _builder.clearWheelchairAccessible()
    }

    /**
     * <pre>
     * Indicates whether bikes are allowed.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;</code>
     */
    public var bikesAllowed: transit_scheduled.GtfsSchedule.Trip.BikeAllowance
      @JvmName("getBikesAllowed")
      get() = _builder.getBikesAllowed()
      @JvmName("setBikesAllowed")
      set(value) {
        _builder.setBikesAllowed(value)
      }
    /**
     * <pre>
     * Indicates whether bikes are allowed.
     * </pre>
     *
     * <code>.transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;</code>
     */
    public fun clearBikesAllowed() {
      _builder.clearBikesAllowed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transit_scheduled.GtfsSchedule.Trip.copy(block: transit_scheduled.TripKt.Dsl.() -> kotlin.Unit): transit_scheduled.GtfsSchedule.Trip =
  transit_scheduled.TripKt.Dsl._create(this.toBuilder()).apply { block() }._build()

