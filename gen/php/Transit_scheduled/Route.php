<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/v1/gtfs-schedule.proto

namespace Transit_scheduled;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Transit routes. A route is a group of trips that are displayed to riders as a
 * single service.
 *
 * Generated from protobuf message <code>transit_scheduled.Route</code>
 */
class Route extends \Google\Protobuf\Internal\Message
{
    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     */
    protected $route_id = '';
    /**
     * Agency for the specified route.
     * Conditionally Required:
     * - Required if multiple agencies are defined in agency.txt.
     * - Recommended otherwise.
     *
     * Generated from protobuf field <code>string agency_id = 2;</code>
     */
    protected $agency_id = '';
    /**
     * Short name of a route. Often a short, abstract identifier (e.g., "32",
     * "100X", "Green") that riders use to identify a route. Both route_short_name
     * and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_long_name is empty.
     * - Recommended if there is a brief service designation. This should be the
     * commonly-known passenger name of the service, and should be no longer than
     * 12 characters.
     *
     * Generated from protobuf field <code>string route_short_name = 3;</code>
     */
    protected $route_short_name = '';
    /**
     * Full name of a route. This name is generally more descriptive than the
     * route_short_name and often includes the route's destination or stop. Both
     * route_short_name and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_short_name is empty.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string route_long_name = 4;</code>
     */
    protected $route_long_name = '';
    /**
     * Description of a route that provides useful, quality information. Should
     * not be a duplicate of route_short_name or route_long_name.
     *
     * Generated from protobuf field <code>string route_desc = 5;</code>
     */
    protected $route_desc = '';
    /**
     * Indicates the type of transportation used on a route.
     * Required
     *
     * Generated from protobuf field <code>.transit_scheduled.Route.RouteType route_type = 6;</code>
     */
    protected $route_type = 0;
    /**
     * URL of a web page about the particular route. Should be different from the
     * agency.agency_url value.
     *
     * Generated from protobuf field <code>string route_url = 7;</code>
     */
    protected $route_url = '';
    /**
     * Route color designation that matches public facing material. Defaults to
     * white (FFFFFF) when omitted or left empty. The color difference between
     * route_color and route_text_color should provide sufficient contrast when
     * viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_color = 8;</code>
     */
    protected $route_color = '';
    /**
     * Legible color to use for text drawn against a background of route_color.
     * Defaults to black (000000) when omitted or left empty. The color difference
     * between route_color and route_text_color should provide sufficient contrast
     * when viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_text_color = 9;</code>
     */
    protected $route_text_color = '';
    /**
     * Orders the routes in a way which is ideal for presentation to customers.
     * Routes with smaller route_sort_order values should be displayed first.
     *
     * Generated from protobuf field <code>uint32 route_sort_order = 10;</code>
     */
    protected $route_sort_order = 0;
    /**
     * Indicates that the rider can board the transit vehicle at any point along
     * the vehicle’s travel path as described by shapes.txt, on every trip of the
     * route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousPickup continuous_pickup = 11;</code>
     */
    protected $continuous_pickup = 0;
    /**
     * Indicates that the rider can alight from the transit vehicle at any point
     * along the vehicle’s travel path as described by shapes.txt, on every trip
     * of the route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousDropOff continuous_drop_off = 12;</code>
     */
    protected $continuous_drop_off = 0;
    /**
     * Identifies a group of routes. Multiple rows in routes.txt may have the same
     * network_id.
     *
     * Generated from protobuf field <code>string network_id = 13;</code>
     */
    protected $network_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $route_id
     *           Identifies a route.
     *           Required
     *     @type string $agency_id
     *           Agency for the specified route.
     *           Conditionally Required:
     *           - Required if multiple agencies are defined in agency.txt.
     *           - Recommended otherwise.
     *     @type string $route_short_name
     *           Short name of a route. Often a short, abstract identifier (e.g., "32",
     *           "100X", "Green") that riders use to identify a route. Both route_short_name
     *           and route_long_name may be defined.
     *           Conditionally Required:
     *           - Required if routes.route_long_name is empty.
     *           - Recommended if there is a brief service designation. This should be the
     *           commonly-known passenger name of the service, and should be no longer than
     *           12 characters.
     *     @type string $route_long_name
     *           Full name of a route. This name is generally more descriptive than the
     *           route_short_name and often includes the route's destination or stop. Both
     *           route_short_name and route_long_name may be defined.
     *           Conditionally Required:
     *           - Required if routes.route_short_name is empty.
     *           - Optional otherwise.
     *     @type string $route_desc
     *           Description of a route that provides useful, quality information. Should
     *           not be a duplicate of route_short_name or route_long_name.
     *     @type int $route_type
     *           Indicates the type of transportation used on a route.
     *           Required
     *     @type string $route_url
     *           URL of a web page about the particular route. Should be different from the
     *           agency.agency_url value.
     *     @type string $route_color
     *           Route color designation that matches public facing material. Defaults to
     *           white (FFFFFF) when omitted or left empty. The color difference between
     *           route_color and route_text_color should provide sufficient contrast when
     *           viewed on a black and white screen.
     *     @type string $route_text_color
     *           Legible color to use for text drawn against a background of route_color.
     *           Defaults to black (000000) when omitted or left empty. The color difference
     *           between route_color and route_text_color should provide sufficient contrast
     *           when viewed on a black and white screen.
     *     @type int $route_sort_order
     *           Orders the routes in a way which is ideal for presentation to customers.
     *           Routes with smaller route_sort_order values should be displayed first.
     *     @type int $continuous_pickup
     *           Indicates that the rider can board the transit vehicle at any point along
     *           the vehicle’s travel path as described by shapes.txt, on every trip of the
     *           route.
     *     @type int $continuous_drop_off
     *           Indicates that the rider can alight from the transit vehicle at any point
     *           along the vehicle’s travel path as described by shapes.txt, on every trip
     *           of the route.
     *     @type string $network_id
     *           Identifies a group of routes. Multiple rows in routes.txt may have the same
     *           network_id.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protos\V1\GtfsSchedule::initOnce();
        parent::__construct($data);
    }

    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     * @return string
     */
    public function getRouteId()
    {
        return $this->route_id;
    }

    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteId($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_id = $var;

        return $this;
    }

    /**
     * Agency for the specified route.
     * Conditionally Required:
     * - Required if multiple agencies are defined in agency.txt.
     * - Recommended otherwise.
     *
     * Generated from protobuf field <code>string agency_id = 2;</code>
     * @return string
     */
    public function getAgencyId()
    {
        return $this->agency_id;
    }

    /**
     * Agency for the specified route.
     * Conditionally Required:
     * - Required if multiple agencies are defined in agency.txt.
     * - Recommended otherwise.
     *
     * Generated from protobuf field <code>string agency_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAgencyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->agency_id = $var;

        return $this;
    }

    /**
     * Short name of a route. Often a short, abstract identifier (e.g., "32",
     * "100X", "Green") that riders use to identify a route. Both route_short_name
     * and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_long_name is empty.
     * - Recommended if there is a brief service designation. This should be the
     * commonly-known passenger name of the service, and should be no longer than
     * 12 characters.
     *
     * Generated from protobuf field <code>string route_short_name = 3;</code>
     * @return string
     */
    public function getRouteShortName()
    {
        return $this->route_short_name;
    }

    /**
     * Short name of a route. Often a short, abstract identifier (e.g., "32",
     * "100X", "Green") that riders use to identify a route. Both route_short_name
     * and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_long_name is empty.
     * - Recommended if there is a brief service designation. This should be the
     * commonly-known passenger name of the service, and should be no longer than
     * 12 characters.
     *
     * Generated from protobuf field <code>string route_short_name = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteShortName($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_short_name = $var;

        return $this;
    }

    /**
     * Full name of a route. This name is generally more descriptive than the
     * route_short_name and often includes the route's destination or stop. Both
     * route_short_name and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_short_name is empty.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string route_long_name = 4;</code>
     * @return string
     */
    public function getRouteLongName()
    {
        return $this->route_long_name;
    }

    /**
     * Full name of a route. This name is generally more descriptive than the
     * route_short_name and often includes the route's destination or stop. Both
     * route_short_name and route_long_name may be defined.
     * Conditionally Required:
     * - Required if routes.route_short_name is empty.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string route_long_name = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteLongName($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_long_name = $var;

        return $this;
    }

    /**
     * Description of a route that provides useful, quality information. Should
     * not be a duplicate of route_short_name or route_long_name.
     *
     * Generated from protobuf field <code>string route_desc = 5;</code>
     * @return string
     */
    public function getRouteDesc()
    {
        return $this->route_desc;
    }

    /**
     * Description of a route that provides useful, quality information. Should
     * not be a duplicate of route_short_name or route_long_name.
     *
     * Generated from protobuf field <code>string route_desc = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteDesc($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_desc = $var;

        return $this;
    }

    /**
     * Indicates the type of transportation used on a route.
     * Required
     *
     * Generated from protobuf field <code>.transit_scheduled.Route.RouteType route_type = 6;</code>
     * @return int
     */
    public function getRouteType()
    {
        return $this->route_type;
    }

    /**
     * Indicates the type of transportation used on a route.
     * Required
     *
     * Generated from protobuf field <code>.transit_scheduled.Route.RouteType route_type = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setRouteType($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\Route\RouteType::class);
        $this->route_type = $var;

        return $this;
    }

    /**
     * URL of a web page about the particular route. Should be different from the
     * agency.agency_url value.
     *
     * Generated from protobuf field <code>string route_url = 7;</code>
     * @return string
     */
    public function getRouteUrl()
    {
        return $this->route_url;
    }

    /**
     * URL of a web page about the particular route. Should be different from the
     * agency.agency_url value.
     *
     * Generated from protobuf field <code>string route_url = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_url = $var;

        return $this;
    }

    /**
     * Route color designation that matches public facing material. Defaults to
     * white (FFFFFF) when omitted or left empty. The color difference between
     * route_color and route_text_color should provide sufficient contrast when
     * viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_color = 8;</code>
     * @return string
     */
    public function getRouteColor()
    {
        return $this->route_color;
    }

    /**
     * Route color designation that matches public facing material. Defaults to
     * white (FFFFFF) when omitted or left empty. The color difference between
     * route_color and route_text_color should provide sufficient contrast when
     * viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_color = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteColor($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_color = $var;

        return $this;
    }

    /**
     * Legible color to use for text drawn against a background of route_color.
     * Defaults to black (000000) when omitted or left empty. The color difference
     * between route_color and route_text_color should provide sufficient contrast
     * when viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_text_color = 9;</code>
     * @return string
     */
    public function getRouteTextColor()
    {
        return $this->route_text_color;
    }

    /**
     * Legible color to use for text drawn against a background of route_color.
     * Defaults to black (000000) when omitted or left empty. The color difference
     * between route_color and route_text_color should provide sufficient contrast
     * when viewed on a black and white screen.
     *
     * Generated from protobuf field <code>string route_text_color = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteTextColor($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_text_color = $var;

        return $this;
    }

    /**
     * Orders the routes in a way which is ideal for presentation to customers.
     * Routes with smaller route_sort_order values should be displayed first.
     *
     * Generated from protobuf field <code>uint32 route_sort_order = 10;</code>
     * @return int
     */
    public function getRouteSortOrder()
    {
        return $this->route_sort_order;
    }

    /**
     * Orders the routes in a way which is ideal for presentation to customers.
     * Routes with smaller route_sort_order values should be displayed first.
     *
     * Generated from protobuf field <code>uint32 route_sort_order = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setRouteSortOrder($var)
    {
        GPBUtil::checkUint32($var);
        $this->route_sort_order = $var;

        return $this;
    }

    /**
     * Indicates that the rider can board the transit vehicle at any point along
     * the vehicle’s travel path as described by shapes.txt, on every trip of the
     * route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousPickup continuous_pickup = 11;</code>
     * @return int
     */
    public function getContinuousPickup()
    {
        return $this->continuous_pickup;
    }

    /**
     * Indicates that the rider can board the transit vehicle at any point along
     * the vehicle’s travel path as described by shapes.txt, on every trip of the
     * route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousPickup continuous_pickup = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setContinuousPickup($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\ContinuousPickup::class);
        $this->continuous_pickup = $var;

        return $this;
    }

    /**
     * Indicates that the rider can alight from the transit vehicle at any point
     * along the vehicle’s travel path as described by shapes.txt, on every trip
     * of the route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousDropOff continuous_drop_off = 12;</code>
     * @return int
     */
    public function getContinuousDropOff()
    {
        return $this->continuous_drop_off;
    }

    /**
     * Indicates that the rider can alight from the transit vehicle at any point
     * along the vehicle’s travel path as described by shapes.txt, on every trip
     * of the route.
     *
     * Generated from protobuf field <code>.transit_scheduled.ContinuousDropOff continuous_drop_off = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setContinuousDropOff($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\ContinuousDropOff::class);
        $this->continuous_drop_off = $var;

        return $this;
    }

    /**
     * Identifies a group of routes. Multiple rows in routes.txt may have the same
     * network_id.
     *
     * Generated from protobuf field <code>string network_id = 13;</code>
     * @return string
     */
    public function getNetworkId()
    {
        return $this->network_id;
    }

    /**
     * Identifies a group of routes. Multiple rows in routes.txt may have the same
     * network_id.
     *
     * Generated from protobuf field <code>string network_id = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setNetworkId($var)
    {
        GPBUtil::checkString($var, True);
        $this->network_id = $var;

        return $this;
    }

}

