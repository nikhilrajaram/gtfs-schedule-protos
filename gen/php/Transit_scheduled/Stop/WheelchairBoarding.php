<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/v1/gtfs-schedule.proto

namespace Transit_scheduled\Stop;

use UnexpectedValueException;

/**
 * Indicates whether wheelchair boardings are possible from the location.
 * Valid options are:
 *   For parentless stops:
 *     0 or empty - No accessibility information for the stop.
 *     1 - Some vehicles at this stop can be boarded by a rider in a
 *     wheelchair.
 *     2 - Wheelchair boarding is not possible at this stop.
 *   For child stops:
 *     0 or empty - Stop will inherit its wheelchair_boarding behavior from
 *     the parent station, if specified in the parent.
 *     1 - There exists some accessible path from outside the station to the
 *     specific stop/platform.
 *     2 - There exists no accessible path from outside the station to the
 *     specific stop/platform.
 *   For station entrances/exits:
 *     0 or empty - Station entrance will inherit its wheelchair_boarding
 *     behavior from the parent station, if specified for the parent.
 *     1 - Station entrance is wheelchair accessible.
 *     2 - No accessible path from station entrance to stops/platforms.
 *
 * Protobuf type <code>transit_scheduled.Stop.WheelchairBoarding</code>
 */
class WheelchairBoarding
{
    /**
     * Generated from protobuf enum <code>WHEELCHAIR_BOARDING_NO_INFO = 0;</code>
     */
    const WHEELCHAIR_BOARDING_NO_INFO = 0;
    /**
     * Generated from protobuf enum <code>WHEELCHAIR_BOARDING_POSSIBLE = 1;</code>
     */
    const WHEELCHAIR_BOARDING_POSSIBLE = 1;
    /**
     * Generated from protobuf enum <code>WHEELCHAIR_BOARDING_NOT_POSSIBLE = 2;</code>
     */
    const WHEELCHAIR_BOARDING_NOT_POSSIBLE = 2;

    private static $valueToName = [
        self::WHEELCHAIR_BOARDING_NO_INFO => 'WHEELCHAIR_BOARDING_NO_INFO',
        self::WHEELCHAIR_BOARDING_POSSIBLE => 'WHEELCHAIR_BOARDING_POSSIBLE',
        self::WHEELCHAIR_BOARDING_NOT_POSSIBLE => 'WHEELCHAIR_BOARDING_NOT_POSSIBLE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(WheelchairBoarding::class, \Transit_scheduled\Stop_WheelchairBoarding::class);

