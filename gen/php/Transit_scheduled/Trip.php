<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/v1/gtfs-schedule.proto

namespace Transit_scheduled;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Trips for each route. A trip is a sequence of two or more stops that occur
 * during a specific time period.
 *
 * Generated from protobuf message <code>transit_scheduled.Trip</code>
 */
class Trip extends \Google\Protobuf\Internal\Message
{
    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     */
    protected $route_id = '';
    /**
     * Identifies a set of dates when service is available for one or more routes.
     * Required
     *
     * Generated from protobuf field <code>string service_id = 2;</code>
     */
    protected $service_id = '';
    /**
     * Identifies a trip.
     * Required
     *
     * Generated from protobuf field <code>string trip_id = 3;</code>
     */
    protected $trip_id = '';
    /**
     * Text that appears on signage identifying the trip's destination to riders.
     * Should be used to distinguish between different patterns of service on the
     * same route.
     * If the headsign changes during a trip, values for trip_headsign may be
     * overridden by defining values in stop_times.stop_headsign for specific
     * stop_times along the trip.
     *
     * Generated from protobuf field <code>string trip_headsign = 4;</code>
     */
    protected $trip_headsign = '';
    /**
     * Public facing text used to identify the trip to riders, for instance, to
     * identify train numbers for commuter rail trips. If riders do not commonly
     * rely on trip names, trip_short_name should be empty. A trip_short_name
     * value, if provided, should uniquely identify a trip within a service day;
     * it should not be used for destination names or limited/express
     * designations.
     *
     * Generated from protobuf field <code>string trip_short_name = 5;</code>
     */
    protected $trip_short_name = '';
    /**
     * Indicates the direction of travel for a trip.
     * This field should not be used in routing; it provides a way to separate
     * trips by direction when publishing time tables.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.Direction direction_id = 6;</code>
     */
    protected $direction_id = 0;
    /**
     * Identifies the block to which the trip belongs. A block consists of a
     * single trip or many sequential trips made using the same vehicle, defined
     * by shared service days and block_id. A block_id may have trips with
     * different service days, making distinct blocks. See the example below. To
     * provide in-seat transfers information, transfers of transfer_type 4 should
     * be provided instead.
     *
     * Generated from protobuf field <code>string block_id = 7;</code>
     */
    protected $block_id = '';
    /**
     * Identifies a geospatial shape describing the vehicle travel path for a
     * trip.
     * Conditionally Required:
     * - Required if the trip has a continuous pickup or drop-off behavior defined
     * either in routes.txt or in stop_times.txt.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string shape_id = 8;</code>
     */
    protected $shape_id = '';
    /**
     * Indicates wheelchair accessibility.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;</code>
     */
    protected $wheelchair_accessible = 0;
    /**
     * Indicates whether bikes are allowed.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;</code>
     */
    protected $bikes_allowed = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $route_id
     *           Identifies a route.
     *           Required
     *     @type string $service_id
     *           Identifies a set of dates when service is available for one or more routes.
     *           Required
     *     @type string $trip_id
     *           Identifies a trip.
     *           Required
     *     @type string $trip_headsign
     *           Text that appears on signage identifying the trip's destination to riders.
     *           Should be used to distinguish between different patterns of service on the
     *           same route.
     *           If the headsign changes during a trip, values for trip_headsign may be
     *           overridden by defining values in stop_times.stop_headsign for specific
     *           stop_times along the trip.
     *     @type string $trip_short_name
     *           Public facing text used to identify the trip to riders, for instance, to
     *           identify train numbers for commuter rail trips. If riders do not commonly
     *           rely on trip names, trip_short_name should be empty. A trip_short_name
     *           value, if provided, should uniquely identify a trip within a service day;
     *           it should not be used for destination names or limited/express
     *           designations.
     *     @type int $direction_id
     *           Indicates the direction of travel for a trip.
     *           This field should not be used in routing; it provides a way to separate
     *           trips by direction when publishing time tables.
     *     @type string $block_id
     *           Identifies the block to which the trip belongs. A block consists of a
     *           single trip or many sequential trips made using the same vehicle, defined
     *           by shared service days and block_id. A block_id may have trips with
     *           different service days, making distinct blocks. See the example below. To
     *           provide in-seat transfers information, transfers of transfer_type 4 should
     *           be provided instead.
     *     @type string $shape_id
     *           Identifies a geospatial shape describing the vehicle travel path for a
     *           trip.
     *           Conditionally Required:
     *           - Required if the trip has a continuous pickup or drop-off behavior defined
     *           either in routes.txt or in stop_times.txt.
     *           - Optional otherwise.
     *     @type int $wheelchair_accessible
     *           Indicates wheelchair accessibility.
     *     @type int $bikes_allowed
     *           Indicates whether bikes are allowed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protos\V1\GtfsSchedule::initOnce();
        parent::__construct($data);
    }

    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     * @return string
     */
    public function getRouteId()
    {
        return $this->route_id;
    }

    /**
     * Identifies a route.
     * Required
     *
     * Generated from protobuf field <code>string route_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRouteId($var)
    {
        GPBUtil::checkString($var, True);
        $this->route_id = $var;

        return $this;
    }

    /**
     * Identifies a set of dates when service is available for one or more routes.
     * Required
     *
     * Generated from protobuf field <code>string service_id = 2;</code>
     * @return string
     */
    public function getServiceId()
    {
        return $this->service_id;
    }

    /**
     * Identifies a set of dates when service is available for one or more routes.
     * Required
     *
     * Generated from protobuf field <code>string service_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_id = $var;

        return $this;
    }

    /**
     * Identifies a trip.
     * Required
     *
     * Generated from protobuf field <code>string trip_id = 3;</code>
     * @return string
     */
    public function getTripId()
    {
        return $this->trip_id;
    }

    /**
     * Identifies a trip.
     * Required
     *
     * Generated from protobuf field <code>string trip_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTripId($var)
    {
        GPBUtil::checkString($var, True);
        $this->trip_id = $var;

        return $this;
    }

    /**
     * Text that appears on signage identifying the trip's destination to riders.
     * Should be used to distinguish between different patterns of service on the
     * same route.
     * If the headsign changes during a trip, values for trip_headsign may be
     * overridden by defining values in stop_times.stop_headsign for specific
     * stop_times along the trip.
     *
     * Generated from protobuf field <code>string trip_headsign = 4;</code>
     * @return string
     */
    public function getTripHeadsign()
    {
        return $this->trip_headsign;
    }

    /**
     * Text that appears on signage identifying the trip's destination to riders.
     * Should be used to distinguish between different patterns of service on the
     * same route.
     * If the headsign changes during a trip, values for trip_headsign may be
     * overridden by defining values in stop_times.stop_headsign for specific
     * stop_times along the trip.
     *
     * Generated from protobuf field <code>string trip_headsign = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setTripHeadsign($var)
    {
        GPBUtil::checkString($var, True);
        $this->trip_headsign = $var;

        return $this;
    }

    /**
     * Public facing text used to identify the trip to riders, for instance, to
     * identify train numbers for commuter rail trips. If riders do not commonly
     * rely on trip names, trip_short_name should be empty. A trip_short_name
     * value, if provided, should uniquely identify a trip within a service day;
     * it should not be used for destination names or limited/express
     * designations.
     *
     * Generated from protobuf field <code>string trip_short_name = 5;</code>
     * @return string
     */
    public function getTripShortName()
    {
        return $this->trip_short_name;
    }

    /**
     * Public facing text used to identify the trip to riders, for instance, to
     * identify train numbers for commuter rail trips. If riders do not commonly
     * rely on trip names, trip_short_name should be empty. A trip_short_name
     * value, if provided, should uniquely identify a trip within a service day;
     * it should not be used for destination names or limited/express
     * designations.
     *
     * Generated from protobuf field <code>string trip_short_name = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setTripShortName($var)
    {
        GPBUtil::checkString($var, True);
        $this->trip_short_name = $var;

        return $this;
    }

    /**
     * Indicates the direction of travel for a trip.
     * This field should not be used in routing; it provides a way to separate
     * trips by direction when publishing time tables.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.Direction direction_id = 6;</code>
     * @return int
     */
    public function getDirectionId()
    {
        return $this->direction_id;
    }

    /**
     * Indicates the direction of travel for a trip.
     * This field should not be used in routing; it provides a way to separate
     * trips by direction when publishing time tables.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.Direction direction_id = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setDirectionId($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\Trip\Direction::class);
        $this->direction_id = $var;

        return $this;
    }

    /**
     * Identifies the block to which the trip belongs. A block consists of a
     * single trip or many sequential trips made using the same vehicle, defined
     * by shared service days and block_id. A block_id may have trips with
     * different service days, making distinct blocks. See the example below. To
     * provide in-seat transfers information, transfers of transfer_type 4 should
     * be provided instead.
     *
     * Generated from protobuf field <code>string block_id = 7;</code>
     * @return string
     */
    public function getBlockId()
    {
        return $this->block_id;
    }

    /**
     * Identifies the block to which the trip belongs. A block consists of a
     * single trip or many sequential trips made using the same vehicle, defined
     * by shared service days and block_id. A block_id may have trips with
     * different service days, making distinct blocks. See the example below. To
     * provide in-seat transfers information, transfers of transfer_type 4 should
     * be provided instead.
     *
     * Generated from protobuf field <code>string block_id = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setBlockId($var)
    {
        GPBUtil::checkString($var, True);
        $this->block_id = $var;

        return $this;
    }

    /**
     * Identifies a geospatial shape describing the vehicle travel path for a
     * trip.
     * Conditionally Required:
     * - Required if the trip has a continuous pickup or drop-off behavior defined
     * either in routes.txt or in stop_times.txt.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string shape_id = 8;</code>
     * @return string
     */
    public function getShapeId()
    {
        return $this->shape_id;
    }

    /**
     * Identifies a geospatial shape describing the vehicle travel path for a
     * trip.
     * Conditionally Required:
     * - Required if the trip has a continuous pickup or drop-off behavior defined
     * either in routes.txt or in stop_times.txt.
     * - Optional otherwise.
     *
     * Generated from protobuf field <code>string shape_id = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setShapeId($var)
    {
        GPBUtil::checkString($var, True);
        $this->shape_id = $var;

        return $this;
    }

    /**
     * Indicates wheelchair accessibility.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;</code>
     * @return int
     */
    public function getWheelchairAccessible()
    {
        return $this->wheelchair_accessible;
    }

    /**
     * Indicates wheelchair accessibility.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.WheelchairAccessibility wheelchair_accessible = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setWheelchairAccessible($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\Trip\WheelchairAccessibility::class);
        $this->wheelchair_accessible = $var;

        return $this;
    }

    /**
     * Indicates whether bikes are allowed.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;</code>
     * @return int
     */
    public function getBikesAllowed()
    {
        return $this->bikes_allowed;
    }

    /**
     * Indicates whether bikes are allowed.
     *
     * Generated from protobuf field <code>.transit_scheduled.Trip.BikeAllowance bikes_allowed = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setBikesAllowed($var)
    {
        GPBUtil::checkEnum($var, \Transit_scheduled\Trip\BikeAllowance::class);
        $this->bikes_allowed = $var;

        return $this;
    }

}

