<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/v1/gtfs-schedule.proto

namespace Transit_scheduled\Trip;

use UnexpectedValueException;

/**
 * Indicates the direction of travel for a trip. This field should not be used
 * in routing; it provides a way to separate trips by direction when
 * publishing time tables. Valid options are:
 *   0 - Travel in one direction (e.g. outbound travel).
 *   1 - Travel in the opposite direction (e.g. inbound travel).
 *
 * Protobuf type <code>transit_scheduled.Trip.Direction</code>
 */
class Direction
{
    /**
     * Generated from protobuf enum <code>DIRECTION_ONE_DIRECTION = 0;</code>
     */
    const DIRECTION_ONE_DIRECTION = 0;
    /**
     * Generated from protobuf enum <code>DIRECTION_OPPOSITE = 1;</code>
     */
    const DIRECTION_OPPOSITE = 1;

    private static $valueToName = [
        self::DIRECTION_ONE_DIRECTION => 'DIRECTION_ONE_DIRECTION',
        self::DIRECTION_OPPOSITE => 'DIRECTION_OPPOSITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Direction::class, \Transit_scheduled\Trip_Direction::class);

